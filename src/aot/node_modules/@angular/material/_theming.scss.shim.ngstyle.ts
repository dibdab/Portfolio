/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
 /* tslint:disable */


export const styles:any[] = ['//[_ngcontent-%COMP%]   Import[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   theming[_ngcontent-%COMP%]   functionality.\n//[_ngcontent-%COMP%]   Core[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   can[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   apply[_ngcontent-%COMP%]   material[_ngcontent-%COMP%]   design[_ngcontent-%COMP%]   treatments[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   any[_ngcontent-%COMP%]   element.\n@mixin[_ngcontent-%COMP%]   cdk-a11y[_ngcontent-%COMP%] {\n  .cdk-visually-hidden {\n    border: 0;\n    clip: rect(0 0 0 0);\n    height: 1px;\n    margin: -1px;\n    overflow: hidden;\n    padding: 0;\n    position: absolute;\n    text-transform: none;\n    width: 1px;\n  }\n}\n\n\n@mixin cdk-high-contrast {\n  @media screen and (-ms-high-contrast: active) {\n    @content;\n  }\n}\n\n//[_ngcontent-%COMP%]   Media[_ngcontent-%COMP%]   queries\n//[_ngcontent-%COMP%]   TODO[_ngcontent-%COMP%]:   Find[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   way[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   respect[_ngcontent-%COMP%]   media[_ngcontent-%COMP%]   query[_ngcontent-%COMP%]   ranges.\n//[_ngcontent-%COMP%]   TODO[_ngcontent-%COMP%]:   For[_ngcontent-%COMP%]   example[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   xs-breakpoint[_ngcontent-%COMP%]   should[_ngcontent-%COMP%]   not[_ngcontent-%COMP%]   interfere[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   sm-breakpoint.\n$mat-xsmall[_ngcontent-%COMP%]:   \'max-width[_ngcontent-%COMP%]:   600px\'[_ngcontent-%COMP%];\n$mat-small[_ngcontent-%COMP%]:   \'max-width[_ngcontent-%COMP%]:   960px\'[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   TODO(crisbeto)[_ngcontent-%COMP%]:   this[_ngcontent-%COMP%]   isn\'t[_ngcontent-%COMP%]   being[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   anywhere[_ngcontent-%COMP%]   within[_ngcontent-%COMP%]   Material.[_ngcontent-%COMP%]   keeping[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   backwards[_ngcontent-%COMP%]   compat.\n$mat-font-family[_ngcontent-%COMP%]:   Roboto[_ngcontent-%COMP%], \'Helvetica[_ngcontent-%COMP%]   Neue\'[_ngcontent-%COMP%], sans-serif[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   TODO[_ngcontent-%COMP%]:   Revisit[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   z-indices[_ngcontent-%COMP%]   before[_ngcontent-%COMP%]   beta\n//[_ngcontent-%COMP%]   z-index[_ngcontent-%COMP%]   master[_ngcontent-%COMP%]   list\n\n$z-index-fab[_ngcontent-%COMP%]:   20[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$z-index-drawer[_ngcontent-%COMP%]:   100[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Overlay[_ngcontent-%COMP%]   z[_ngcontent-%COMP%]   indices.\n\n//[_ngcontent-%COMP%]   We[_ngcontent-%COMP%]   want[_ngcontent-%COMP%]   overlays[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   always[_ngcontent-%COMP%]   appear[_ngcontent-%COMP%]   over[_ngcontent-%COMP%]   user[_ngcontent-%COMP%]   content[_ngcontent-%COMP%], so[_ngcontent-%COMP%]   set[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   baseline\n//[_ngcontent-%COMP%]   very[_ngcontent-%COMP%]   high[_ngcontent-%COMP%]   z-index[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   overlay[_ngcontent-%COMP%]   container[_ngcontent-%COMP%], which[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   where[_ngcontent-%COMP%]   we[_ngcontent-%COMP%]   create[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   new\n//[_ngcontent-%COMP%]   stacking[_ngcontent-%COMP%]   context[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   overlays.\n$cdk-z-index-overlay-container[_ngcontent-%COMP%]:   1000[_ngcontent-%COMP%];\n$cdk-z-index-overlay[_ngcontent-%COMP%]:   1000[_ngcontent-%COMP%];\n$cdk-z-index-overlay-backdrop[_ngcontent-%COMP%]:   1000[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Background[_ngcontent-%COMP%]   color[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   backdrops\n$cdk-overlay-dark-backdrop-background[_ngcontent-%COMP%]:   rgba(0[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0.6)[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Global[_ngcontent-%COMP%]   constants\n$pi[_ngcontent-%COMP%]:   3.14159265[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Padding[_ngcontent-%COMP%]   between[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]   toggles[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   their[_ngcontent-%COMP%]   labels\n$mat-toggle-padding[_ngcontent-%COMP%]:   8px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n//[_ngcontent-%COMP%]   Width[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   height[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]   toggles\n$mat-toggle-size[_ngcontent-%COMP%]:   20px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Easing[_ngcontent-%COMP%]   Curves\n//[_ngcontent-%COMP%]   TODO(jelbourn)[_ngcontent-%COMP%]:   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   these[_ngcontent-%COMP%]   need[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   revisited\n\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   default[_ngcontent-%COMP%]   animation[_ngcontent-%COMP%]   curves[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   material[_ngcontent-%COMP%]   design.\n$mat-linear-out-slow-in-timing-function[_ngcontent-%COMP%]:   cubic-bezier(0[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0.2[_ngcontent-%COMP%], 0.1)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$mat-fast-out-slow-in-timing-function[_ngcontent-%COMP%]:   cubic-bezier(0.4[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0.2[_ngcontent-%COMP%], 1)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$mat-fast-out-linear-in-timing-function[_ngcontent-%COMP%]:   cubic-bezier(0.4[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 1[_ngcontent-%COMP%], 1)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n$ease-in-out-curve-function[_ngcontent-%COMP%]:   cubic-bezier(0.35[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0.25[_ngcontent-%COMP%], 1)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n$swift-ease-out-duration[_ngcontent-%COMP%]:   400ms[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-out-timing-function[_ngcontent-%COMP%]:   cubic-bezier(0.25[_ngcontent-%COMP%], 0.8[_ngcontent-%COMP%], 0.25[_ngcontent-%COMP%], 1)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-out[_ngcontent-%COMP%]:   all[_ngcontent-%COMP%]   $swift-ease-out-duration[_ngcontent-%COMP%]   $swift-ease-out-timing-function[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n$swift-ease-in-duration[_ngcontent-%COMP%]:   300ms[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-in-timing-function[_ngcontent-%COMP%]:   cubic-bezier(0.55[_ngcontent-%COMP%], 0[_ngcontent-%COMP%], 0.55[_ngcontent-%COMP%], 0.2)[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-in[_ngcontent-%COMP%]:   all[_ngcontent-%COMP%]   $swift-ease-in-duration[_ngcontent-%COMP%]   $swift-ease-in-timing-function[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n$swift-ease-in-out-duration[_ngcontent-%COMP%]:   500ms[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-in-out-timing-function[_ngcontent-%COMP%]:   $ease-in-out-curve-function[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-ease-in-out[_ngcontent-%COMP%]:   all[_ngcontent-%COMP%]   $swift-ease-in-out-duration[_ngcontent-%COMP%]   $swift-ease-in-out-timing-function[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n$swift-linear-duration[_ngcontent-%COMP%]:   80ms[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-linear-timing-function[_ngcontent-%COMP%]:   linear[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$swift-linear[_ngcontent-%COMP%]:   all[_ngcontent-%COMP%]   $swift-linear-duration[_ngcontent-%COMP%]   $swift-linear-timing-function[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n\n\n//[_ngcontent-%COMP%]   A[_ngcontent-%COMP%]   collection[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   mixins[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   CSS[_ngcontent-%COMP%]   classes[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   can[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   apply[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   material\n//[_ngcontent-%COMP%]   element.\n//[_ngcontent-%COMP%]   See[_ngcontent-%COMP%]:   https[_ngcontent-%COMP%]://www.google.com/design/spec/what-is-material/elevation-shadows.html   Examples[_ngcontent-%COMP%]:   .mat-foo[_ngcontent-%COMP%] {\n//   @include $mat-elevation(2);\n//\n//   &:active {\n//     @include $mat-elevation(8);\n//   }\n// }\n//\n//[_ngcontent-%COMP%]   <div[_ngcontent-%COMP%]   id="external-card"[_ngcontent-%COMP%]   class="mat-elevation-z2"[_ngcontent-%COMP%] > <p[_ngcontent-%COMP%] > Some[_ngcontent-%COMP%]   content</p[_ngcontent-%COMP%] > </div[_ngcontent-%COMP%] > //\n//[_ngcontent-%COMP%]   For[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   explanation[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   design[_ngcontent-%COMP%]   behind[_ngcontent-%COMP%]   how[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   implemented[_ngcontent-%COMP%], see[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   design[_ngcontent-%COMP%]   doc[_ngcontent-%COMP%]   at\n//[_ngcontent-%COMP%]   https[_ngcontent-%COMP%]://goo.gl/Kq0k9Z.   Colors[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   umbra[_ngcontent-%COMP%], penumbra[_ngcontent-%COMP%], and[_ngcontent-%COMP%]   ambient[_ngcontent-%COMP%]   shadows.[_ngcontent-%COMP%]   As[_ngcontent-%COMP%]   described[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   design[_ngcontent-%COMP%]   doc[_ngcontent-%COMP%], each[_ngcontent-%COMP%]   elevation\n//[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   created[_ngcontent-%COMP%]   using[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   set[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   3[_ngcontent-%COMP%]   shadow[_ngcontent-%COMP%]   values[_ngcontent-%COMP%], one[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   umbra[_ngcontent-%COMP%]   (the[_ngcontent-%COMP%]   shadow[_ngcontent-%COMP%]   representing[_ngcontent-%COMP%]   the\n//[_ngcontent-%COMP%]   space[_ngcontent-%COMP%]   completely[_ngcontent-%COMP%]   obscured[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   object[_ngcontent-%COMP%]   relative[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   its[_ngcontent-%COMP%]   light[_ngcontent-%COMP%]   source)[_ngcontent-%COMP%], one[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   penumbra[_ngcontent-%COMP%]   (the\n//[_ngcontent-%COMP%]   space[_ngcontent-%COMP%]   partially[_ngcontent-%COMP%]   obscured[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   object)[_ngcontent-%COMP%], and[_ngcontent-%COMP%]   one[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   ambient[_ngcontent-%COMP%]   (the[_ngcontent-%COMP%]   space[_ngcontent-%COMP%]   which[_ngcontent-%COMP%]   contains[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   object\n//[_ngcontent-%COMP%]   itself).[_ngcontent-%COMP%]   For[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   further[_ngcontent-%COMP%]   explanation[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   these[_ngcontent-%COMP%]   terms[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   their[_ngcontent-%COMP%]   meanings[_ngcontent-%COMP%], see\n//[_ngcontent-%COMP%]   https[_ngcontent-%COMP%]://en.wikipedia.org/wiki/Umbra, _penumbra_and_antumbra.\n\n$_umbra-color[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.2)[_ngcontent-%COMP%];\n$_penumbra-color[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.14)[_ngcontent-%COMP%];\n$_ambient-color[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.12)[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Maps[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   different[_ngcontent-%COMP%]   shadow[_ngcontent-%COMP%]   sets[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   their[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   within[_ngcontent-%COMP%]   each[_ngcontent-%COMP%]   z-space.[_ngcontent-%COMP%]   These[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   were\n//[_ngcontent-%COMP%]   created[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   taking[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   few[_ngcontent-%COMP%]   reference[_ngcontent-%COMP%]   shadow[_ngcontent-%COMP%]   sets[_ngcontent-%COMP%]   created[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   Google\'s[_ngcontent-%COMP%]   Designers[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   interpolating\n//[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   between[_ngcontent-%COMP%]   them.\n\n$_umbra-elevation-map[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   0[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 1[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   -1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 2[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   -2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 3[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   -2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 4[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   -1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 5[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   -1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 6[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   -1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 7[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   -2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 8[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   -3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 9[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   -3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 10[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   -3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 11[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   -4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 12[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   -4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 13[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   -4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 14[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   -4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 15[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   -5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 16[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   -5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 17[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   11px[_ngcontent-%COMP%]   -5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 18[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   11px[_ngcontent-%COMP%]   -5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 19[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   12px[_ngcontent-%COMP%]   -6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 20[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   13px[_ngcontent-%COMP%]   -6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 21[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   13px[_ngcontent-%COMP%]   -6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 22[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   -6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 23[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   11px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   -7px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'[_ngcontent-%COMP%], 24[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   11px[_ngcontent-%COMP%]   15px[_ngcontent-%COMP%]   -7px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_umbra-color}\'\n)[_ngcontent-%COMP%];\n\n$_penumbra-elevation-map[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   0[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 1[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 2[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 3[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 4[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 5[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 6[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 7[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 8[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 9[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   12px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 10[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 11[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   11px[_ngcontent-%COMP%]   15px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 12[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   12px[_ngcontent-%COMP%]   17px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 13[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   13px[_ngcontent-%COMP%]   19px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 14[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   21px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 15[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   15px[_ngcontent-%COMP%]   22px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 16[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   16px[_ngcontent-%COMP%]   24px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 17[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   17px[_ngcontent-%COMP%]   26px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 18[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   18px[_ngcontent-%COMP%]   28px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 19[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   19px[_ngcontent-%COMP%]   29px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 20[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   20px[_ngcontent-%COMP%]   31px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 21[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   21px[_ngcontent-%COMP%]   33px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 22[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   22px[_ngcontent-%COMP%]   35px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 23[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   23px[_ngcontent-%COMP%]   36px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'[_ngcontent-%COMP%], 24[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   24px[_ngcontent-%COMP%]   38px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_penumbra-color}\'\n)[_ngcontent-%COMP%];\n\n$_ambient-elevation-map[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   0[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 1[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 2[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 3[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 4[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   10px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 5[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 6[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   18px[_ngcontent-%COMP%]   0px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 7[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   16px[_ngcontent-%COMP%]   1px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 8[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   14px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 9[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   16px[_ngcontent-%COMP%]   2px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 10[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   18px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 11[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   20px[_ngcontent-%COMP%]   3px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 12[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   22px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 13[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   24px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 14[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   26px[_ngcontent-%COMP%]   4px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 15[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   28px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 16[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   30px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 17[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   32px[_ngcontent-%COMP%]   5px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 18[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   34px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 19[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   36px[_ngcontent-%COMP%]   6px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 20[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   38px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 21[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   40px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 22[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   42px[_ngcontent-%COMP%]   7px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 23[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   44px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'[_ngcontent-%COMP%], 24[_ngcontent-%COMP%]:   \'0px[_ngcontent-%COMP%]   9px[_ngcontent-%COMP%]   46px[_ngcontent-%COMP%]   8px[_ngcontent-%COMP%]   #[_ngcontent-%COMP%]{$_ambient-color}\'\n)[_ngcontent-%COMP%];\n\n\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   default[_ngcontent-%COMP%]   duration[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   transitions.\n$mat-elevation-transition-duration[_ngcontent-%COMP%]:   280ms[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   default[_ngcontent-%COMP%]   easing[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   transitions.\n$mat-elevation-transition-timing-function[_ngcontent-%COMP%]:   $mat-fast-out-slow-in-timing-function[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   correct[_ngcontent-%COMP%]   css[_ngcontent-%COMP%]   rules[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   give[_ngcontent-%COMP%]   it[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   specified[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   $zValue.\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   $zValue[_ngcontent-%COMP%]   must[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   between[_ngcontent-%COMP%]   0[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   24.\n@mixin[_ngcontent-%COMP%]   mat-elevation($zValue)[_ngcontent-%COMP%] {\n  @if type-of($zValue) != number or not unitless($zValue) {\n    @error \'$zValue must be a unitless number\';\n  }\n  @if $zValue < 0 or $zValue > 24 {\n    @error \'$zValue must be between 0 and 24\';\n  }\n\n  box-shadow: #{map-get($_umbra-elevation-map, $zValue)},\n              #{map-get($_penumbra-elevation-map, $zValue)},\n              #{map-get($_ambient-elevation-map, $zValue)};\n}\n\n//[_ngcontent-%COMP%]   Returns[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   string[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   can[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   as[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   transition[_ngcontent-%COMP%]   property[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   elevation.\n//[_ngcontent-%COMP%]   Calling[_ngcontent-%COMP%]   this[_ngcontent-%COMP%]   function[_ngcontent-%COMP%]   directly[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   useful[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   situations[_ngcontent-%COMP%]   where[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   component[_ngcontent-%COMP%]   needs[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   transition\n//[_ngcontent-%COMP%]   more[_ngcontent-%COMP%]   than[_ngcontent-%COMP%]   one[_ngcontent-%COMP%]   property.\n//\n//[_ngcontent-%COMP%]   .foo[_ngcontent-%COMP%] {\n//   transition: mat-elevation-transition-property-value(), opacity 100ms ease;\n// }\n@function mat-elevation-transition-property-value(\n    $duration: $mat-elevation-transition-duration,\n    $easing: $mat-elevation-transition-timing-function) {\n  @return box-shadow #{$duration} #{$easing};\n}\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   correct[_ngcontent-%COMP%]   css[_ngcontent-%COMP%]   rules[_ngcontent-%COMP%]   needed[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   have[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   transition[_ngcontent-%COMP%]   between[_ngcontent-%COMP%]   elevations.\n//[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   should[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   applied[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   elements[_ngcontent-%COMP%]   whose[_ngcontent-%COMP%]   elevation[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   will[_ngcontent-%COMP%]   change[_ngcontent-%COMP%]   depending[_ngcontent-%COMP%]   on[_ngcontent-%COMP%]   their\n//[_ngcontent-%COMP%]   context[_ngcontent-%COMP%]   (e.g.[_ngcontent-%COMP%]   when[_ngcontent-%COMP%]   active[_ngcontent-%COMP%]   or[_ngcontent-%COMP%]   disabled).\n//\n//[_ngcontent-%COMP%]   NOTE(traviskaufman)[_ngcontent-%COMP%]:   Both[_ngcontent-%COMP%]   this[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   above[_ngcontent-%COMP%]   function[_ngcontent-%COMP%]   use[_ngcontent-%COMP%]   default[_ngcontent-%COMP%]   parameters[_ngcontent-%COMP%]   so[_ngcontent-%COMP%]   they[_ngcontent-%COMP%]   can\n//[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   same[_ngcontent-%COMP%]   way[_ngcontent-%COMP%]   by[_ngcontent-%COMP%]   clients.\n@mixin[_ngcontent-%COMP%]   mat-elevation-transition([_ngcontent-%COMP%]   $duration[_ngcontent-%COMP%]:   $mat-elevation-transition-duration[_ngcontent-%COMP%], $easing[_ngcontent-%COMP%]:   $mat-elevation-transition-timing-function)[_ngcontent-%COMP%] {\n  transition: mat-elevation-transition-property-value($duration, $easing);\n}\n\n\n\n\n@mixin cdk-overlay() {\n  .cdk-overlay-container, .cdk-global-overlay-wrapper {\n    // Disable events from being captured on the overlay container.\n    pointer-events: none;\n\n    // The container should be the size of the viewport.\n    top: 0;\n    left: 0;\n    height: 100%;\n    width: 100%;\n  }\n\n  // The overlay-container is an invisible element which contains all individual overlays.\n  .cdk-overlay-container {\n    position: fixed;\n    z-index: $cdk-z-index-overlay-container;\n  }\n\n  // We use an extra wrapper element in order to use make the overlay itself a flex item.\n  // This makes centering the overlay easy without running into the subpixel rendering\n  // problems tied to using `transform` and without interfering with the other position\n  // strategies.\n  .cdk-global-overlay-wrapper {\n    display: flex;\n    position: absolute;\n    z-index: $cdk-z-index-overlay;\n  }\n\n  // A single overlay pane.\n  .cdk-overlay-pane {\n    position: absolute;\n    pointer-events: auto;\n    box-sizing: border-box;\n    z-index: $cdk-z-index-overlay;\n  }\n\n  .cdk-overlay-backdrop {\n    // TODO(jelbourn): reuse sidenav fullscreen mixin.\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    left: 0;\n    right: 0;\n\n    z-index: $cdk-z-index-overlay-backdrop;\n    pointer-events: auto;\n    -webkit-tap-highlight-color: transparent;\n\n    // TODO(jelbourn): figure out if there are actually spec\'ed colors for both light and dark\n    // themes here. Currently using the values from AngularJS Material.\n    transition: opacity $swift-ease-out-duration $swift-ease-out-timing-function;\n    opacity: 0;\n\n    &.cdk-overlay-backdrop-showing {\n      opacity: 0.48;\n    }\n  }\n\n  .cdk-overlay-dark-backdrop {\n    background: $cdk-overlay-dark-backdrop-background;\n  }\n\n  .cdk-overlay-transparent-backdrop {\n    background: none;\n  }\n\n  // Used when disabling global scrolling.\n  .cdk-global-scrollblock {\n    position: fixed;\n\n    // Necessary for the content not to lose its width. Note that we\'re using 100%, instead of\n    // 100vw, because 100vw includes the width plus the scrollbar, whereas 100% is the width\n    // that the element had before we made it `fixed`.\n    width: 100%;\n\n    // Note: this will always add a scrollbar to whatever element it is on, which can\n    // potentially result in double scrollbars. It shouldn\'t be an issue, because we won\'t\n    // block scrolling on a page that doesn\'t have a scrollbar in the first place.\n    overflow-y: scroll;\n  }\n}\n\n//[_ngcontent-%COMP%]   Color[_ngcontent-%COMP%]   palettes[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   Design[_ngcontent-%COMP%]   spec.\n//[_ngcontent-%COMP%]   See[_ngcontent-%COMP%]   https[_ngcontent-%COMP%]://www.google.com/design/spec/style/color.html   Contrast[_ngcontent-%COMP%]   colors[_ngcontent-%COMP%]   are[_ngcontent-%COMP%]   hard-coded[_ngcontent-%COMP%]   because[_ngcontent-%COMP%]   it[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   too[_ngcontent-%COMP%]   difficult[_ngcontent-%COMP%]   (probably[_ngcontent-%COMP%]   impossible)[_ngcontent-%COMP%]   to\n//[_ngcontent-%COMP%]   calculate[_ngcontent-%COMP%]   them.[_ngcontent-%COMP%]   These[_ngcontent-%COMP%]   contrast[_ngcontent-%COMP%]   colors[_ngcontent-%COMP%]   are[_ngcontent-%COMP%]   pulled[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   public[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   Design[_ngcontent-%COMP%]   spec[_ngcontent-%COMP%]   swatches.\n//[_ngcontent-%COMP%]   While[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   contrast[_ngcontent-%COMP%]   colors[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   spec[_ngcontent-%COMP%]   are[_ngcontent-%COMP%]   not[_ngcontent-%COMP%]   prescriptive[_ngcontent-%COMP%], we[_ngcontent-%COMP%]   use[_ngcontent-%COMP%]   them[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   convenience.\n\n\n$black-87-opacity[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.87)[_ngcontent-%COMP%];\n$white-87-opacity[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.87)[_ngcontent-%COMP%];\n$black-12-opacity[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.12)[_ngcontent-%COMP%];\n$white-12-opacity[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.12)[_ngcontent-%COMP%];\n$black-6-opacity[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.06)[_ngcontent-%COMP%];\n$white-6-opacity[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.06)[_ngcontent-%COMP%];\n\n$mat-red[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #ffebee[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #ffcdd2[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #ef9a9a[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #e57373[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ef5350[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #f44336[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #e53935[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #d32f2f[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #c62828[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #b71c1c[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ff8a80[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ff5252[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #ff1744[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #d50000[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-pink[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #fce4ec[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #f8bbd0[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #f48fb1[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #f06292[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ec407a[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #e91e63[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #d81b60[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #c2185b[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #ad1457[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #880e4f[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ff80ab[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ff4081[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #f50057[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #c51162[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-purple[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #f3e5f5[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #e1bee7[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #ce93d8[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #ba68c8[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ab47bc[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #9c27b0[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #8e24aa[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #7b1fa2[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #6a1b9a[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #4a148c[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ea80fc[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #e040fb[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #d500f9[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #aa00ff[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-deep-purple[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #ede7f6[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #d1c4e9[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #b39ddb[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #9575cd[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #7e57c2[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #673ab7[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #5e35b1[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #512da8[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #4527a0[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #311b92[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #b388ff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #7c4dff[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #651fff[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #6200ea[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-indigo[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e8eaf6[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #c5cae9[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #9fa8da[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #7986cb[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #5c6bc0[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #3f51b5[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #3949ab[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #303f9f[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #283593[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #1a237e[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #8c9eff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #536dfe[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #3d5afe[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #304ffe[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-blue[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e3f2fd[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #bbdefb[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #90caf9[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #64b5f6[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #42a5f5[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #2196f3[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #1e88e5[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #1976d2[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #1565c0[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #0d47a1[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #82b1ff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #448aff[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #2979ff[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #2962ff[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-light-blue[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e1f5fe[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #b3e5fc[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #81d4fa[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #4fc3f7[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #29b6f6[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #03a9f4[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #039be5[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #0288d1[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #0277bd[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #01579b[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #80d8ff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #40c4ff[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #00b0ff[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #0091ea[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-cyan[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e0f7fa[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #b2ebf2[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #80deea[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #4dd0e1[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #26c6da[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #00bcd4[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #00acc1[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #0097a7[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #00838f[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #006064[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #84ffff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #18ffff[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #00e5ff[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #00b8d4[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-teal[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e0f2f1[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #b2dfdb[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #80cbc4[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #4db6ac[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #26a69a[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #009688[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #00897b[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #00796b[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #00695c[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #004d40[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #a7ffeb[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #64ffda[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #1de9b6[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #00bfa5[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-green[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #e8f5e9[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #c8e6c9[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #a5d6a7[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #81c784[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #66bb6a[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #4caf50[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #43a047[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #388e3c[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #2e7d32[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #1b5e20[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #b9f6ca[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #69f0ae[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #00e676[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #00c853[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-light-green[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #f1f8e9[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #dcedc8[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #c5e1a5[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #aed581[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #9ccc65[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #8bc34a[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #7cb342[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #689f38[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #558b2f[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #33691e[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ccff90[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #b2ff59[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #76ff03[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #64dd17[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-lime[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #f9fbe7[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #f0f4c3[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #e6ee9c[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #dce775[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #d4e157[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #cddc39[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #c0ca33[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #afb42b[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #9e9d24[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #827717[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #f4ff81[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #eeff41[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #c6ff00[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #aeea00[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-yellow[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #fffde7[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #fff9c4[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #fff59d[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #fff176[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ffee58[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #ffeb3b[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #fdd835[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #fbc02d[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #f9a825[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #f57f17[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ffff8d[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ffff00[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #ffea00[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #ffd600[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-amber[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #fff8e1[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #ffecb3[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #ffe082[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #ffd54f[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ffca28[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #ffc107[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #ffb300[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #ffa000[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #ff8f00[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #ff6f00[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ffe57f[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ffd740[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #ffc400[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #ffab00[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-orange[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #fff3e0[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #ffe0b2[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #ffcc80[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #ffb74d[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ffa726[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #ff9800[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #fb8c00[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #f57c00[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #ef6c00[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #e65100[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ffd180[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ffab40[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #ff9100[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #ff6d00[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   black[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-deep-orange[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #fbe9e7[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #ffccbc[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #ffab91[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #ff8a65[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #ff7043[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #ff5722[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #f4511e[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #e64a19[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #d84315[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #bf360c[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ff9e80[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #ff6e40[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #ff3d00[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #dd2c00[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-brown[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #efebe9[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #d7ccc8[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #bcaaa4[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #a1887f[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #8d6e63[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #795548[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #6d4c41[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #5d4037[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #4e342e[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #3e2723[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #d7ccc8[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #bcaaa4[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #8d6e63[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #5d4037[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-grey[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   0[_ngcontent-%COMP%]:   #ffffff[_ngcontent-%COMP%], 50[_ngcontent-%COMP%]:   #fafafa[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #f5f5f5[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #eeeeee[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #e0e0e0[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #bdbdbd[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #9e9e9e[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #757575[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #616161[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #424242[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #212121[_ngcontent-%COMP%], 1000[_ngcontent-%COMP%]:   #000000[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #ffffff[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #eeeeee[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #bdbdbd[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #616161[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   0[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 1000[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n$mat-blue-grey[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   #eceff1[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   #cfd8dc[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   #b0bec5[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   #90a4ae[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   #78909c[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   #607d8b[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   #546e7a[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   #455a64[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   #37474f[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   #263238[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   #cfd8dc[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   #b0bec5[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   #78909c[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   #455a64[_ngcontent-%COMP%], contrast[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   50[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 300[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], 400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 500[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], 600[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 800[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], 900[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], A100[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A200[_ngcontent-%COMP%]:   $black-87-opacity[_ngcontent-%COMP%], A400[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], A700[_ngcontent-%COMP%]:   $white-87-opacity[_ngcontent-%COMP%], )\n)[_ngcontent-%COMP%];\n\n\n//[_ngcontent-%COMP%]   Background[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   light[_ngcontent-%COMP%]   themes.\n$mat-light-theme-background[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   status-bar[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 300)[_ngcontent-%COMP%], app-bar[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 100)[_ngcontent-%COMP%], background[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 50)[_ngcontent-%COMP%], hover[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.04)[_ngcontent-%COMP%], //[_ngcontent-%COMP%]   TODO(kara)[_ngcontent-%COMP%]:   check[_ngcontent-%COMP%]   style[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   Design[_ngcontent-%COMP%]   UX[_ngcontent-%COMP%]   card[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], dialog[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], disabled-button[_ngcontent-%COMP%]:   $black-12-opacity[_ngcontent-%COMP%], raised-button[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], focused-button[_ngcontent-%COMP%]:   $black-6-opacity[_ngcontent-%COMP%], selected-button[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 300)[_ngcontent-%COMP%], selected-disabled-button[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], disabled-button-toggle[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 200)[_ngcontent-%COMP%], )[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Background[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   dark[_ngcontent-%COMP%]   themes.\n$mat-dark-theme-background[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   status-bar[_ngcontent-%COMP%]:   black[_ngcontent-%COMP%], app-bar[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 900)[_ngcontent-%COMP%], background[_ngcontent-%COMP%]:   #303030[_ngcontent-%COMP%], hover[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.04)[_ngcontent-%COMP%], //[_ngcontent-%COMP%]   TODO(kara)[_ngcontent-%COMP%]:   check[_ngcontent-%COMP%]   style[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   Design[_ngcontent-%COMP%]   UX[_ngcontent-%COMP%]   card[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 800)[_ngcontent-%COMP%], dialog[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 800)[_ngcontent-%COMP%], disabled-button[_ngcontent-%COMP%]:   $white-12-opacity[_ngcontent-%COMP%], raised-button[_ngcontent-%COMP%]:   map-get($mat-grey[_ngcontent-%COMP%], 800)[_ngcontent-%COMP%], focused-button[_ngcontent-%COMP%]:   $white-6-opacity[_ngcontent-%COMP%], selected-button[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 900)[_ngcontent-%COMP%], selected-disabled-button[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 800)[_ngcontent-%COMP%], disabled-button-toggle[_ngcontent-%COMP%]:   map_get($mat-grey[_ngcontent-%COMP%], 1000)[_ngcontent-%COMP%], )[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Foreground[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   light[_ngcontent-%COMP%]   themes.\n$mat-light-theme-foreground[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   base[_ngcontent-%COMP%]:   black[_ngcontent-%COMP%], divider[_ngcontent-%COMP%]:   $black-12-opacity[_ngcontent-%COMP%], dividers[_ngcontent-%COMP%]:   $black-12-opacity[_ngcontent-%COMP%], disabled[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.38)[_ngcontent-%COMP%], disabled-button[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.38)[_ngcontent-%COMP%], disabled-text[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.38)[_ngcontent-%COMP%], hint-text[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.38)[_ngcontent-%COMP%], secondary-text[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.54)[_ngcontent-%COMP%], icon[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.54)[_ngcontent-%COMP%], icons[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.54)[_ngcontent-%COMP%], text[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.87)[_ngcontent-%COMP%], slider-off[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.26)[_ngcontent-%COMP%], slider-off-active[_ngcontent-%COMP%]:   rgba(black[_ngcontent-%COMP%], 0.38)[_ngcontent-%COMP%], )[_ngcontent-%COMP%];\n\n//[_ngcontent-%COMP%]   Foreground[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   dark[_ngcontent-%COMP%]   themes.\n$mat-dark-theme-foreground[_ngcontent-%COMP%]:   ([_ngcontent-%COMP%]   base[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], divider[_ngcontent-%COMP%]:   $white-12-opacity[_ngcontent-%COMP%], dividers[_ngcontent-%COMP%]:   $white-12-opacity[_ngcontent-%COMP%], disabled[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], disabled-button[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], disabled-text[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], hint-text[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], secondary-text[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.7)[_ngcontent-%COMP%], icon[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], icons[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], text[_ngcontent-%COMP%]:   white[_ngcontent-%COMP%], slider-off[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], slider-off-active[_ngcontent-%COMP%]:   rgba(white[_ngcontent-%COMP%], 0.3)[_ngcontent-%COMP%], )[_ngcontent-%COMP%];\n\n\n\n//[_ngcontent-%COMP%]   For[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   given[_ngcontent-%COMP%]   hue[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%], return[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   contrast[_ngcontent-%COMP%]   color[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   map[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   contrast[_ngcontent-%COMP%]   palettes.\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $color-map\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $hue\n@function[_ngcontent-%COMP%]   mat-contrast($palette[_ngcontent-%COMP%], $hue)[_ngcontent-%COMP%] {\n  @return map-get(map-get($palette, contrast), $hue);\n}\n\n\n//[_ngcontent-%COMP%]   Creates[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   map[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   hues[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   colors[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   theme.[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   define[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   terms\n//[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   Design[_ngcontent-%COMP%]   hues.\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $color-map\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $primary\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $lighter\n@function[_ngcontent-%COMP%]   mat-palette($base-palette[_ngcontent-%COMP%], $default[_ngcontent-%COMP%]:   500[_ngcontent-%COMP%], $lighter[_ngcontent-%COMP%]:   100[_ngcontent-%COMP%], $darker[_ngcontent-%COMP%]:   700)[_ngcontent-%COMP%] {\n  $result: map_merge($base-palette, (\n    default: map-get($base-palette, $default),\n    lighter: map-get($base-palette, $lighter),\n    darker: map-get($base-palette, $darker),\n\n    default-contrast: mat-contrast($base-palette, $default),\n    lighter-contrast: mat-contrast($base-palette, $lighter),\n    darker-contrast: mat-contrast($base-palette, $darker)\n  ));\n\n  // For each hue in the palette, add a "-contrast" color to the map.\n  @each $hue, $color in $base-palette {\n    $result: map_merge($result, (\n      \'#{$hue}-contrast\': mat-contrast($base-palette, $hue)\n    ));\n  }\n\n  @return $result;\n}\n\n\n//[_ngcontent-%COMP%]   Gets[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   color[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   (the[_ngcontent-%COMP%]   output[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   mat-palette).\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   hue[_ngcontent-%COMP%]   can[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   one[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   standard[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   (500[_ngcontent-%COMP%], A400[_ngcontent-%COMP%], etc.)[_ngcontent-%COMP%], one[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   three[_ngcontent-%COMP%]   preconfigured\n//[_ngcontent-%COMP%]   hues[_ngcontent-%COMP%]   (default[_ngcontent-%COMP%], lighter[_ngcontent-%COMP%], darker)[_ngcontent-%COMP%], or[_ngcontent-%COMP%]   any[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   aforementioned[_ngcontent-%COMP%]   prefixed[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   "-contrast".\n//\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $color-map[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   (output[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   mat-palette).\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $hue[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   hue[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   palette[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   use.[_ngcontent-%COMP%]   If[_ngcontent-%COMP%]   this[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   between[_ngcontent-%COMP%]   0[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   1[_ngcontent-%COMP%], it[_ngcontent-%COMP%]   will\n//[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   treated[_ngcontent-%COMP%]   as[_ngcontent-%COMP%]   opacity.\n//[_ngcontent-%COMP%]   @param[_ngcontent-%COMP%]   $opacity[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   alpha[_ngcontent-%COMP%]   channel[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   color.\n@function[_ngcontent-%COMP%]   mat-color($palette[_ngcontent-%COMP%], $hue[_ngcontent-%COMP%]:   default[_ngcontent-%COMP%], $opacity[_ngcontent-%COMP%]:   null)[_ngcontent-%COMP%] {\n  // If hueKey is a number between zero and one, then it actually contains an\n  // opacity value, so recall this function with the default hue and that given opacity.\n  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {\n    @return mat-color($palette, default, $hue);\n  }\n\n  $color: map-get($palette, $hue);\n  $opacity: if($opacity == null, opacity($color), $opacity);\n\n  @return rgba($color, $opacity);\n}\n\n\n//[_ngcontent-%COMP%]   Creates[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   container[_ngcontent-%COMP%]   object[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   light[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   given[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   individual[_ngcontent-%COMP%]   component[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   mixins.\n@function[_ngcontent-%COMP%]   mat-light-theme($primary[_ngcontent-%COMP%], $accent[_ngcontent-%COMP%], $warn[_ngcontent-%COMP%]:   mat-palette($mat-red))[_ngcontent-%COMP%] {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: $warn,\n    is-dark: false,\n    foreground: $mat-light-theme-foreground,\n    background: $mat-light-theme-background,\n  );\n}\n\n\n//[_ngcontent-%COMP%]   Creates[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   container[_ngcontent-%COMP%]   object[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   dark[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   given[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   individual[_ngcontent-%COMP%]   component[_ngcontent-%COMP%]   theme[_ngcontent-%COMP%]   mixins.\n@function[_ngcontent-%COMP%]   mat-dark-theme($primary[_ngcontent-%COMP%], $accent[_ngcontent-%COMP%], $warn[_ngcontent-%COMP%]:   mat-palette($mat-red))[_ngcontent-%COMP%] {\n  @return (\n    primary: $primary,\n    accent: $accent,\n    warn: $warn,\n    is-dark: true,\n    foreground: $mat-dark-theme-foreground,\n    background: $mat-dark-theme-background,\n  );\n}\n\n\n$mat-ripple-color-opacity[_ngcontent-%COMP%]:   0.1[_ngcontent-%COMP%];\n\n@mixin mat-ripple() {\n  // The host element of an md-ripple directive should always have a position of "absolute" or\n  // "relative" so that the ripple divs it creates inside itself are correctly positioned.\n  .mat-ripple {\n    overflow: hidden;\n  }\n\n  .mat-ripple.mat-ripple-unbounded {\n    overflow: visible;\n  }\n\n  .mat-ripple-element {\n    position: absolute;\n    border-radius: 50%;\n    pointer-events: none;\n\n    transition: opacity, transform 0ms cubic-bezier(0, 0, 0.2, 1);\n    transform: scale(0);\n  }\n}\n\n\n@mixin mat-ripple-theme($theme) {\n  $foreground: map_get($theme, foreground);\n  $foreground-base: map_get($foreground, base);\n\n  .mat-ripple-element {\n    background-color: rgba($foreground-base, $mat-ripple-color-opacity);\n  }\n}\n\n\n\n//[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   will[_ngcontent-%COMP%]   ensure[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   lines[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   overflow[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   container[_ngcontent-%COMP%]   will[_ngcontent-%COMP%]   hide[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   overflow[_ngcontent-%COMP%]   and\n//[_ngcontent-%COMP%]   truncate[_ngcontent-%COMP%]   neatly[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   ellipsis.\n@mixin[_ngcontent-%COMP%]   mat-truncate-line()[_ngcontent-%COMP%] {\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\n//[_ngcontent-%COMP%]   Mixin[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   provide[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   mat-line[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%], changing[_ngcontent-%COMP%]   secondary[_ngcontent-%COMP%]   font[_ngcontent-%COMP%]   size[_ngcontent-%COMP%]   based[_ngcontent-%COMP%]   on[_ngcontent-%COMP%]   whether[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   list\n//[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   dense[_ngcontent-%COMP%]   mode.\n@mixin[_ngcontent-%COMP%]   mat-line-base($secondary-font-size)[_ngcontent-%COMP%] {\n  .mat-line {\n    @include mat-truncate-line();\n    display: block;\n    box-sizing: border-box;\n\n    // all lines but the top line should have smaller text\n    &:nth-child(n+2) {\n      font-size: $secondary-font-size;\n    }\n  }\n}\n\n//[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   normalizes[_ngcontent-%COMP%]   default[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%], e.g.[_ngcontent-%COMP%]   font[_ngcontent-%COMP%]   weight[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   heading[_ngcontent-%COMP%]   text.\n@mixin[_ngcontent-%COMP%]   mat-normalize-text()[_ngcontent-%COMP%] {\n  & > * {\n    margin: 0;\n    padding: 0;\n    font-weight: normal;\n    font-size: inherit;\n  }\n}\n\n//[_ngcontent-%COMP%]   This[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   provides[_ngcontent-%COMP%]   base[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   wrapper[_ngcontent-%COMP%]   around[_ngcontent-%COMP%]   mat-line[_ngcontent-%COMP%]   elements[_ngcontent-%COMP%]   in[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   list.\n@mixin[_ngcontent-%COMP%]   mat-line-wrapper-base()[_ngcontent-%COMP%] {\n  @include mat-normalize-text();\n\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  box-sizing: border-box;\n  overflow: hidden;\n\n  // Must remove wrapper when lines are empty or it takes up horizontal\n  // space and pushes other elements to the right.\n  &:empty {\n    display: none;\n  }\n}\n\n\n\n\n//[_ngcontent-%COMP%]   menu[_ngcontent-%COMP%]   width[_ngcontent-%COMP%]   must[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   multiple[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   56px\n$mat-menu-overlay-min-width[_ngcontent-%COMP%]:   112px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];   //[_ngcontent-%COMP%]   56[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]   2\n$mat-menu-overlay-max-width[_ngcontent-%COMP%]:   280px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];   //[_ngcontent-%COMP%]   56[_ngcontent-%COMP%]   *[_ngcontent-%COMP%]   5\n\n$mat-menu-item-height[_ngcontent-%COMP%]:   48px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$mat-menu-side-padding[_ngcontent-%COMP%]:   16px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$mat-menu-icon-margin[_ngcontent-%COMP%]:   16px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n\n@mixin mat-menu-base() {\n  @include mat-elevation(8);\n  min-width: $mat-menu-overlay-min-width;\n  max-width: $mat-menu-overlay-max-width;\n\n  overflow: auto;\n  -webkit-overflow-scrolling: touch;   // for momentum scroll on mobile\n}\n\n@mixin mat-menu-item-base() {\n  @include mat-truncate-line();\n\n  // Needs to be a block for the ellipsis to work.\n  display: block;\n  line-height: $mat-menu-item-height;\n  height: $mat-menu-item-height;\n  padding: 0 $mat-menu-side-padding;\n\n  text-align: left;\n  text-decoration: none;   // necessary to reset anchor tags\n\n  &[disabled] {\n    cursor: default;\n  }\n\n  [dir=\'rtl\'] & {\n    text-align: right;\n  }\n\n  .mat-icon {\n    margin-right: $mat-menu-icon-margin;\n\n    [dir=\'rtl\'] & {\n      margin-left: $mat-menu-icon-margin;\n      margin-right: 0;\n    }\n  }\n}\n\n\n@mixin mat-menu-positions() {\n  &.mat-menu-after.mat-menu-below {\n    transform-origin: left top;\n  }\n\n  &.mat-menu-after.mat-menu-above {\n    transform-origin: left bottom;\n  }\n\n  &.mat-menu-before.mat-menu-below {\n    transform-origin: right top;\n  }\n\n  &.mat-menu-before.mat-menu-above {\n    transform-origin: right bottom;\n  }\n\n  [dir=\'rtl\'] & {\n    &.mat-menu-after.mat-menu-below {\n      transform-origin: right top;\n    }\n\n    &.mat-menu-after.mat-menu-above {\n      transform-origin: right bottom;\n    }\n\n    &.mat-menu-before.mat-menu-below {\n      transform-origin: left top;\n    }\n\n    &.mat-menu-before.mat-menu-above {\n      transform-origin: left bottom;\n    }\n  }\n}\n\n\n@mixin user-select($value) {\n  -webkit-user-select: none;\n  -moz-user-select: none;\n  -ms-user-select: none;\n  user-select: none;\n}\n\n@mixin input-placeholder {\n  &::placeholder {\n    @content;\n  }\n\n  &::-moz-placeholder {\n    @content;\n  }\n\n  &::-webkit-input-placeholder {\n    @content;\n  }\n\n  &:-ms-input-placeholder {\n    @content;\n  }\n}\n\n@mixin cursor-grab {\n  cursor: -webkit-grab;\n  cursor: grab;\n}\n\n@mixin cursor-grabbing {\n  cursor: -webkit-grabbing;\n  cursor: grabbing;\n}\n\n\n\n\n\n@mixin mat-option() {\n  .mat-option {\n    @include mat-menu-item-base();\n    position: relative;\n    cursor: pointer;\n    outline: none;\n\n    &[aria-disabled=\'true\'] {\n      @include user-select(none);\n      cursor: default;\n    }\n\n    .mat-optgroup &:not(.mat-option-multiple) {\n      padding-left: $mat-menu-side-padding * 2;\n\n      [dir=\'rtl\'] & {\n        padding-left: $mat-menu-side-padding;\n        padding-right: $mat-menu-side-padding * 2;\n      }\n    }\n  }\n\n  .mat-option-ripple {\n    position: absolute;\n    top: 0;\n    left: 0;\n    bottom: 0;\n    right: 0;\n\n    // Disable pointer events for the ripple container because the container will overlay the\n    // user content and we don\'t want to disable mouse events on the user content.\n    // Pointer events can be safely disabled because the ripple trigger element is the host element.\n    pointer-events: none;\n\n    // Prevents the ripple from completely covering the option in high contrast mode.\n    @include cdk-high-contrast {\n      opacity: 0.5;\n    }\n  }\n\n  .mat-option-pseudo-checkbox {\n    $margin: $mat-menu-side-padding / 2;\n    margin-right: $margin;\n\n    [dir=\'rtl\'] & {\n      margin-left: $margin;\n      margin-right: 0;\n    }\n  }\n}\n\n\n\n\n//[_ngcontent-%COMP%]   Utility[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   fetching[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   nested[_ngcontent-%COMP%]   value[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   config.\n@function[_ngcontent-%COMP%]   _mat-get-type-value($config[_ngcontent-%COMP%], $level[_ngcontent-%COMP%], $name)[_ngcontent-%COMP%] {\n  @return map-get(map-get($config, $level), $name);\n}\n\n//[_ngcontent-%COMP%]   Gets[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   font[_ngcontent-%COMP%]   size[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   inside[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   config.\n@function[_ngcontent-%COMP%]   mat-font-size($config[_ngcontent-%COMP%], $level)[_ngcontent-%COMP%] {\n  @return _mat-get-type-value($config, $level, font-size);\n}\n\n//[_ngcontent-%COMP%]   Gets[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   line[_ngcontent-%COMP%]   height[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   inside[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   config.\n@function[_ngcontent-%COMP%]   mat-line-height($config[_ngcontent-%COMP%], $level)[_ngcontent-%COMP%] {\n  @return _mat-get-type-value($config, $level, line-height);\n}\n\n//[_ngcontent-%COMP%]   Gets[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   font[_ngcontent-%COMP%]   weight[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   inside[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   config.\n@function[_ngcontent-%COMP%]   mat-font-weight($config[_ngcontent-%COMP%], $level)[_ngcontent-%COMP%] {\n  @return _mat-get-type-value($config, $level, font-weight);\n}\n\n//[_ngcontent-%COMP%]   Gets[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   font-family[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   config[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   removes[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   quotes[_ngcontent-%COMP%]   around[_ngcontent-%COMP%]   it.\n@function[_ngcontent-%COMP%]   mat-font-family($config)[_ngcontent-%COMP%] {\n  @return unquote(map-get($config, font-family));\n}\n\n//[_ngcontent-%COMP%]   Converts[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   into[_ngcontent-%COMP%]   CSS[_ngcontent-%COMP%]   styles.\n@mixin[_ngcontent-%COMP%]   mat-typography-level-to-styles($config[_ngcontent-%COMP%], $level)[_ngcontent-%COMP%] {\n  $font-size: mat-font-size($config, $level);\n  $font-weight: mat-font-weight($config, $level);\n  $line-height: mat-line-height($config, $level);\n  $font-family: mat-font-family($config);\n\n  // Use the shorthand `font` to represent a typography level, because it\'s the shortest. Notes that\n  // we need to use interpolation for `font-size/line-height` in order to prevent SASS from dividing\n  // the two values.\n  font: $font-weight #{$font-size}/#{$line-height} $font-family;\n}\n\n\n@mixin mat-option-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-option {\n    color: mat-color($foreground, text);\n\n    &:hover:not(.mat-option-disabled), &:focus:not(.mat-option-disabled) {\n      background: mat-color($background, hover);\n    }\n\n    &.mat-selected.mat-primary, .mat-primary &.mat-selected {\n      color: mat-color($primary);\n    }\n\n    &.mat-selected.mat-accent, .mat-accent &.mat-selected {\n      color: mat-color($accent);\n    }\n\n    &.mat-selected.mat-warn, .mat-warn &.mat-selected {\n      color: mat-color($warn);\n    }\n\n    // In multiple mode there is a checkbox to show that the option is selected.\n    &.mat-selected:not(.mat-option-multiple) {\n      background: mat-color($background, hover);\n    }\n\n    &.mat-active {\n      background: mat-color($background, hover);\n      color: mat-color($foreground, text);\n    }\n\n    &.mat-option-disabled {\n      color: mat-color($foreground, hint-text);\n    }\n  }\n}\n\n@mixin mat-option-typography($config) {\n  .mat-option {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, subheading-2);\n    }\n  }\n}\n\n\n\n\n@mixin mat-optgroup() {\n  .mat-optgroup-label {\n    @include mat-menu-item-base();\n    @include user-select(none);\n    cursor: default;\n  }\n}\n\n\n\n\n\n@mixin mat-optgroup-theme($theme) {\n  $foreground: map-get($theme, foreground);\n\n  .mat-optgroup-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-optgroup-disabled .mat-optgroup-label {\n    color: mat-color($foreground, hint-text);\n  }\n}\n\n@mixin mat-optgroup-typography($config) {\n  .mat-optgroup-label {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n}\n\n\n\n@mixin _mat-pseudo-checkbox-inner-content-theme($theme, $pallete-name) {\n  $pallete: map-get($theme, $pallete-name);\n  $color: mat-color($pallete);\n\n  .mat-pseudo-checkbox-checked.mat-#{$pallete-name},\n  .mat-pseudo-checkbox-indeterminate.mat-#{$pallete-name},\n  .mat-#{$pallete-name} .mat-pseudo-checkbox-checked,\n  .mat-#{$pallete-name} .mat-pseudo-checkbox-indeterminate {\n    background: $color;\n  }\n}\n\n@mixin mat-pseudo-checkbox-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n  $colored-box-selector: \'.mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate\';\n\n  .mat-pseudo-checkbox {\n    color: mat-color(map-get($theme, foreground), secondary-text);\n\n    &::after {\n      color: mat-color($background, background);\n    }\n  }\n\n  @include _mat-pseudo-checkbox-inner-content-theme($theme, primary);\n  @include _mat-pseudo-checkbox-inner-content-theme($theme, accent);\n  @include _mat-pseudo-checkbox-inner-content-theme($theme, warn);\n\n  .mat-pseudo-checkbox-checked, .mat-pseudo-checkbox-indeterminate {\n    &.mat-pseudo-checkbox-disabled {\n      background: $disabled-color;\n    }\n  }\n}\n\n\n\n//[_ngcontent-%COMP%]   Represents[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   level[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   Material[_ngcontent-%COMP%]   design[_ngcontent-%COMP%]   spec.\n@function[_ngcontent-%COMP%]   mat-typography-level($font-size[_ngcontent-%COMP%], $line-height[_ngcontent-%COMP%]:   $font-size[_ngcontent-%COMP%], $font-weight[_ngcontent-%COMP%]:   400)[_ngcontent-%COMP%] {\n  @return (\n    font-size: $font-size,\n    line-height: $line-height,\n    font-weight: $font-weight\n  );\n}\n\n//[_ngcontent-%COMP%]   Represents[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   collection[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   levels.\n//[_ngcontent-%COMP%]   Defaults[_ngcontent-%COMP%]   come[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   https[_ngcontent-%COMP%]://material.io/guidelines/style/typography.html   mat-typography-config([_ngcontent-%COMP%]   $font-family[_ngcontent-%COMP%]:   \'Roboto[_ngcontent-%COMP%], "Helvetica[_ngcontent-%COMP%]   Neue"[_ngcontent-%COMP%], sans-serif\'[_ngcontent-%COMP%], $display-4[_ngcontent-%COMP%]:   mat-typography-level(112px[_ngcontent-%COMP%], 112px[_ngcontent-%COMP%], 300)[_ngcontent-%COMP%], $display-3[_ngcontent-%COMP%]:   mat-typography-level(56px[_ngcontent-%COMP%], 56px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $display-2[_ngcontent-%COMP%]:   mat-typography-level(45px[_ngcontent-%COMP%], 48px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $display-1[_ngcontent-%COMP%]:   mat-typography-level(34px[_ngcontent-%COMP%], 40px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $headline[_ngcontent-%COMP%]:   mat-typography-level(24px[_ngcontent-%COMP%], 32px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $title[_ngcontent-%COMP%]:   mat-typography-level(20px[_ngcontent-%COMP%], 32px[_ngcontent-%COMP%], 500)[_ngcontent-%COMP%], $subheading-2[_ngcontent-%COMP%]:   mat-typography-level(16px[_ngcontent-%COMP%], 28px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $subheading-1[_ngcontent-%COMP%]:   mat-typography-level(15px[_ngcontent-%COMP%], 24px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $body-2[_ngcontent-%COMP%]:   mat-typography-level(14px[_ngcontent-%COMP%], 24px[_ngcontent-%COMP%], 500)[_ngcontent-%COMP%], $body-1[_ngcontent-%COMP%]:   mat-typography-level(14px[_ngcontent-%COMP%], 20px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $caption[_ngcontent-%COMP%]:   mat-typography-level(12px[_ngcontent-%COMP%], 20px[_ngcontent-%COMP%], 400)[_ngcontent-%COMP%], $button[_ngcontent-%COMP%]:   mat-typography-level(14px[_ngcontent-%COMP%], 14px[_ngcontent-%COMP%], 500)[_ngcontent-%COMP%], //[_ngcontent-%COMP%]   Line-height[_ngcontent-%COMP%]   must[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   unit-less[_ngcontent-%COMP%]   fraction[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   font-size.[_ngcontent-%COMP%]   $input[_ngcontent-%COMP%]:   mat-typography-level(inherit[_ngcontent-%COMP%], 1.125[_ngcontent-%COMP%], 400)\n)[_ngcontent-%COMP%] {\n  @return (\n    font-family:    $font-family,\n    display-4:      $display-4,\n    display-3:      $display-3,\n    display-2:      $display-2,\n    display-1:      $display-1,\n    headline:       $headline,\n    title:          $title,\n    subheading-2:   $subheading-2,\n    subheading-1:   $subheading-1,\n    body-2:         $body-2,\n    body-1:         $body-1,\n    caption:        $caption,\n    button:         $button,\n    input:          $input,\n  );\n}\n\n//[_ngcontent-%COMP%]   Adds[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   base[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%], based[_ngcontent-%COMP%]   on[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   config.\n@mixin[_ngcontent-%COMP%]   mat-base-typography($config[_ngcontent-%COMP%], $selector[_ngcontent-%COMP%]:   \'.mat-typography\')[_ngcontent-%COMP%] {\n  .mat-h1, .mat-headline, #{$selector} h1 {\n    @include mat-typography-level-to-styles($config, headline);\n    margin: 0 0 16px;\n  }\n\n  .mat-h2, .mat-title, #{$selector} h2 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0 0 16px;\n  }\n\n  .mat-h3, .mat-subheading-2, #{$selector} h3 {\n    @include mat-typography-level-to-styles($config, subheading-2);\n    margin: 0 0 16px;\n  }\n\n  .mat-h4, .mat-subheading-1, #{$selector} h4 {\n    @include mat-typography-level-to-styles($config, subheading-1);\n    margin: 0 0 16px;\n  }\n\n  // Note: the spec doesn\'t have anything that would correspond to h5 and h6, but we add these for\n  // consistency. The font sizes come from the Chrome user agent styles which have h5 at 0.83em\n  // and h6 at 0.67em.\n  .mat-h5, #{$selector} h5 {\n    font-size: mat-font-size($config, body-1) * 0.83;\n    font-weight: mat-font-weight($config, body-1);\n    font-family: mat-font-family($config);\n    line-height: mat-line-height($config, body-1);\n    margin: 0 0 12px;\n  }\n\n  .mat-h6, #{$selector} h6 {\n    font-size: mat-font-size($config, body-1) * 0.67;\n    font-weight: mat-font-weight($config, body-1);\n    font-family: mat-font-family($config);\n    line-height: mat-line-height($config, body-1);\n    margin: 0 0 12px;\n  }\n\n  .mat-body-strong, .mat-body-2 {\n    @include mat-typography-level-to-styles($config, body-2);\n  }\n\n  .mat-body, .mat-body-1, #{$selector} {\n    @include mat-typography-level-to-styles($config, body-1);\n\n    p {\n      margin: 0 0 12px;\n    }\n  }\n\n  .mat-small, .mat-caption {\n    @include mat-typography-level-to-styles($config, caption);\n  }\n\n  // Note: The spec doesn\'t mention letter spacing. The value comes from\n  // eyeballing it until it looked exactly like the spec examples.\n  .mat-display-4, #{$selector} .mat-display-4 {\n    @include mat-typography-level-to-styles($config, display-4);\n    margin: 0 0 56px;\n    letter-spacing: -0.05em;\n  }\n\n  .mat-display-3, #{$selector} .mat-display-3 {\n    @include mat-typography-level-to-styles($config, display-3);\n    margin: 0 0 64px;\n    letter-spacing: -0.02em;\n  }\n\n  .mat-display-2, #{$selector} .mat-display-2 {\n    @include mat-typography-level-to-styles($config, display-2);\n    margin: 0 0 64px;\n    letter-spacing: -0.005em;\n  }\n\n  .mat-display-1, #{$selector} .mat-display-1 {\n    @include mat-typography-level-to-styles($config, display-1);\n    margin: 0 0 64px;\n  }\n}\n\n\n\n@mixin mat-autocomplete-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-autocomplete-panel {\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n\n    .mat-option {\n      // Selected options in autocompletes should not be gray, but we\n      // only want to override the background for selected options if\n      // they are *not* in hover or focus state. This change has to be\n      // made here because base option styles are shared between the\n      // autocomplete and the select.\n      &.mat-selected:not(.mat-active):not(:hover) {\n        background: mat-color($background, card);\n        color: mat-color($foreground, text);\n      }\n    }\n  }\n\n}\n\n@mixin mat-autocomplete-typography($config) { }\n\n\n\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   focus[_ngcontent-%COMP%]   style[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   md-button[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   each[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   supported[_ngcontent-%COMP%]   palettes.\n@mixin[_ngcontent-%COMP%]   _mat-button-focus-color($theme)[_ngcontent-%COMP%] {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-button-focus-overlay {\n    background-color: mat-color($primary, 0.12);\n  }\n\n  &.mat-accent .mat-button-focus-overlay {\n    background-color: mat-color($accent, 0.12);\n  }\n\n  &.mat-warn .mat-button-focus-overlay {\n    background-color: mat-color($warn, 0.12);\n  }\n\n  &[disabled] .mat-button-focus-overlay {\n    background-color: transparent;\n  }\n}\n\n@mixin _mat-button-ripple-color($theme, $hue, $opacity: 0.2) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  &.mat-primary .mat-ripple-element {\n    background-color: mat-color($primary, $hue, $opacity);\n  }\n\n  &.mat-accent .mat-ripple-element {\n    background-color: mat-color($accent, $hue, $opacity);\n  }\n\n  &.mat-warn .mat-ripple-element {\n    background-color: mat-color($warn, $hue, $opacity);\n  }\n}\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   property[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   md-button[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   each[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   supported[_ngcontent-%COMP%]   palettes.\n@mixin[_ngcontent-%COMP%]   _mat-button-theme-color($theme[_ngcontent-%COMP%], $property[_ngcontent-%COMP%], $color[_ngcontent-%COMP%]:   \'default\')[_ngcontent-%COMP%] {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  &.mat-primary {\n    #{$property}: mat-color($primary, $color);\n  }\n  &.mat-accent {\n    #{$property}: mat-color($accent, $color);\n  }\n  &.mat-warn {\n    #{$property}: mat-color($warn, $color);\n  }\n\n  &.mat-primary, &.mat-accent, &.mat-warn, &[disabled] {\n    &[disabled] {\n      $palette: if($property == \'color\', $foreground, $background);\n      #{$property}: mat-color($palette, disabled-button);\n    }\n  }\n}\n\n@mixin mat-button-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-button, .mat-icon-button {\n    background: transparent;\n\n    @include _mat-button-focus-color($theme);\n    @include _mat-button-theme-color($theme, \'color\');\n  }\n\n  .mat-raised-button, .mat-fab, .mat-mini-fab {\n    // Default properties when not using any [color] value.\n    color: mat-color($foreground, text);\n    background-color: mat-color($background, raised-button);\n\n    @include _mat-button-theme-color($theme, \'color\', default-contrast);\n    @include _mat-button-theme-color($theme, \'background-color\');\n\n    // Add ripple effect with contrast color to buttons that don\'t have a focus overlay.\n    @include _mat-button-ripple-color($theme, default-contrast);\n  }\n\n  // Add ripple effect with default color to flat buttons, which also have a focus overlay.\n  .mat-button {\n    @include _mat-button-ripple-color($theme, default, 0.1);\n  }\n\n  // Add ripple effect with default color to the icon button. Ripple color needs to be stronger\n  // since the icon button doesn\'t have a focus overlay.\n  .mat-icon-button {\n    @include _mat-button-ripple-color($theme, default);\n  }\n}\n\n@mixin mat-button-typography($config) {\n  .mat-button, .mat-raised-button, .mat-icon-button {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   focus[_ngcontent-%COMP%]   style[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   an[_ngcontent-%COMP%]   md-button-toggle[_ngcontent-%COMP%]   element[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   each[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   supported[_ngcontent-%COMP%]   palettes.\n@mixin[_ngcontent-%COMP%]   _mat-button-toggle-focus-color($theme)[_ngcontent-%COMP%] {\n  $background: map-get($theme, background);\n\n  .mat-button-toggle-focus-overlay {\n    background-color: mat-color($background, focused-button);\n  }\n}\n\n@mixin mat-button-toggle-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-button-toggle {\n    color: mat-color($foreground, hint-text);\n\n    &.cdk-focused {\n      @include _mat-button-toggle-focus-color($theme);\n    }\n  }\n\n  .mat-button-toggle-checked {\n    background-color: mat-color($background, selected-button);\n    color: mat-color($foreground, base);\n  }\n\n  .mat-button-toggle-disabled {\n    background-color: mat-color($background, disabled-button-toggle);\n    color: mat-color($foreground, disabled-button);\n\n    &.mat-button-toggle-checked {\n      background-color: mat-color($background, selected-disabled-button);\n    }\n  }\n}\n\n@mixin mat-button-toggle-typography($config) {\n  .mat-button-toggle {\n    font-family: mat-font-family($config);\n  }\n}\n\n\n\n\n\n\n@mixin mat-card-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-card {\n    background: mat-color($background, card);\n    color: mat-color($foreground, text);\n  }\n\n  .mat-card-subtitle {\n    color: mat-color($foreground, secondary-text);\n  }\n}\n\n@mixin mat-card-typography($config) {\n  .mat-card {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-card-title {\n    font: {\n      size: mat-font-size($config, headline);\n      weight: mat-font-weight($config, headline);\n    }\n  }\n\n  .mat-card-subtitle,\n  .mat-card-content,\n  .mat-card-header .mat-card-title {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n\n@mixin mat-checkbox-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n\n\n  // The color of the checkbox\'s checkmark / mixedmark.\n  $checkbox-mark-color: mat-color($background, background);\n\n  // NOTE(traviskaufman): While the spec calls for translucent blacks/whites for disabled colors,\n  // this does not work well with elements layered on top of one another. To get around this we\n  // blend the colors together based on the base color and the theme background.\n  $white-30pct-opacity-on-dark: #686868;\n  $black-26pct-opacity-on-light: #b0b0b0;\n  $disabled-color: if($is-dark-theme, $white-30pct-opacity-on-dark, $black-26pct-opacity-on-light);\n\n  .mat-checkbox-frame {\n    border-color: mat-color(map-get($theme, foreground), secondary-text);\n  }\n\n  .mat-checkbox-checkmark {\n    fill: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-checkmark-path {\n    // !important is needed here because a stroke must be set as an attribute on the SVG in order\n    // for line animation to work properly.\n    stroke: $checkbox-mark-color !important;\n  }\n\n  .mat-checkbox-mixedmark {\n    background-color: $checkbox-mark-color;\n  }\n\n  .mat-checkbox-indeterminate, .mat-checkbox-checked {\n    &.mat-primary .mat-checkbox-background {\n      background-color: mat-color($primary);\n    }\n\n    &.mat-accent .mat-checkbox-background {\n      background-color: mat-color($accent);\n    }\n\n    &.mat-warn .mat-checkbox-background {\n      background-color: mat-color($warn);\n    }\n  }\n\n  .mat-checkbox-disabled {\n    &.mat-checkbox-checked, &.mat-checkbox-indeterminate {\n      .mat-checkbox-background {\n        background-color: $disabled-color;\n      }\n    }\n\n    &:not(.mat-checkbox-checked) {\n      .mat-checkbox-frame {\n        border-color: $disabled-color;\n      }\n    }\n\n    .mat-checkbox-label {\n      color: $disabled-color;\n    }\n  }\n\n  .mat-checkbox:not(.mat-checkbox-disabled) {\n    &.mat-primary .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($primary, 0.26);\n    }\n\n    &.mat-accent .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($accent, 0.26);\n    }\n\n    &.mat-warn .mat-checkbox-ripple .mat-ripple-element {\n      background-color: mat-color($warn, 0.26);\n    }\n  }\n}\n\n@mixin mat-checkbox-typography($config) {\n  .mat-checkbox {\n    font-family: mat-font-family($config);\n  }\n\n  // TODO(kara): Remove this style when fixing vertical baseline\n  .mat-checkbox-layout .mat-checkbox-label {\n    line-height: mat-line-height($config, body-2);\n  }\n}\n\n\n\n\n\n//[_ngcontent-%COMP%]   TODO(crisbeto)[_ngcontent-%COMP%]:   these[_ngcontent-%COMP%]   values[_ngcontent-%COMP%]   don\'t[_ngcontent-%COMP%]   correspond[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   any[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   breakpoints.\n$mat-chip-font-size[_ngcontent-%COMP%]:   13px[_ngcontent-%COMP%];\n$mat-chip-line-height[_ngcontent-%COMP%]:   16px[_ngcontent-%COMP%];\n\n\n@mixin mat-chips-theme($theme) {\n  $is-dark-theme: map-get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // Use spec-recommended color for regular foreground, and utilise contrast color for a grey very\n  // close to the selected spec since no guidance is provided and to ensure palette consistency.\n  $light-foreground: rgba(0, 0, 0, 0.87);\n  $light-selected-foreground: mat-contrast($mat-grey, 600);\n\n  // The spec only provides guidance for light-themed chips. When inside of a dark theme, fall back\n  // to standard background and foreground colors.\n  $unselected-background: if($is-dark-theme, mat-color($background, card), #e0e0e0);\n  $unselected-foreground: if($is-dark-theme, mat-color($foreground, text), $light-foreground);\n\n  $selected-background: if($is-dark-theme, mat-color($background, app-bar), #808080);\n  $selected-foreground: if($is-dark-theme, mat-color($foreground, text), $light-selected-foreground);\n\n  .mat-chip:not(.mat-basic-chip) {\n    background-color: $unselected-background;\n    color: $unselected-foreground;\n  }\n\n  .mat-chip.mat-chip-selected:not(.mat-basic-chip) {\n    background-color: $selected-background;\n    color: $selected-foreground;\n\n    &.mat-primary {\n      background-color: mat-color($primary);\n      color: mat-color($primary, default-contrast);\n    }\n\n    &.mat-accent {\n      background-color: mat-color($accent);\n      color: mat-color($accent, default-contrast);\n    }\n\n    &.mat-warn {\n      background-color: mat-color($warn);\n      color: mat-color($warn, default-contrast);\n    }\n  }\n}\n\n@mixin mat-chips-typography($config) {\n  .mat-chip:not(.mat-basic-chip) {\n    font-size: $mat-chip-font-size;\n    line-height: $mat-chip-line-height;\n  }\n}\n\n\n\n\n\n@mixin mat-table-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-table {\n    background: mat-color($background, \'card\');\n  }\n\n  .mat-row, .mat-header-row {\n    border-bottom-color: mat-color($foreground, divider);\n  }\n\n  .mat-header-cell {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-cell {\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-table-typography($config) {\n  $font-family: mat-font-family($config);\n\n  .mat-header-cell {\n    font-size: mat-font-size($config, caption);\n    font-weight: mat-font-weight($config, body-2);\n  }\n\n  .mat-cell {\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n\n\n$mat-calendar-body-font-size[_ngcontent-%COMP%]:   13px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n$mat-calendar-weekday-table-font-size[_ngcontent-%COMP%]:   11px[_ngcontent-%COMP%]   !default[_ngcontent-%COMP%];\n\n\n@mixin mat-datepicker-theme($theme) {\n  $primary: map-get($theme, primary);\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  $mat-datepicker-selected-today-box-shadow-width: 1px;\n  $mat-datepicker-selected-fade-amount: 0.6;\n  $mat-datepicker-today-fade-amount: 0.2;\n\n  .mat-datepicker-content {\n    background-color: mat-color($background, card);\n    color: mat-color($foreground, text);\n  }\n\n  .mat-calendar-arrow {\n    border-top-color: mat-color($foreground, icon);\n  }\n\n  .mat-calendar-next-button,\n  .mat-calendar-previous-button {\n    color: mat-color($foreground, icon);\n  }\n\n  .mat-calendar-table-header {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-calendar-table-header-divider::after {\n    background: mat-color($foreground, divider);\n  }\n\n  .mat-calendar-body-label {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-calendar-body-cell-content {\n    color: mat-color($foreground, text);\n    border-color: transparent;\n\n    .mat-calendar-body-disabled > &:not(.mat-calendar-body-selected) {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n\n  :not(.mat-calendar-body-disabled):hover,\n  .cdk-keyboard-focused .mat-calendar-body-active {\n    & > .mat-calendar-body-cell-content:not(.mat-calendar-body-selected) {\n      background-color: mat-color($background, hover);\n    }\n  }\n\n  .mat-calendar-body-selected {\n    background-color: mat-color($primary);\n    color: mat-color($primary, default-contrast);\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-selected {\n    background-color: fade-out(mat-color($primary), $mat-datepicker-selected-fade-amount);\n  }\n\n  .mat-calendar-body-today {\n    &:not(.mat-calendar-body-selected) {\n      // Note: though it\'s not text, the border is a hint about the fact that this is today\'s date,\n      // so we use the hint color.\n      border-color: mat-color($foreground, hint-text);\n    }\n\n    &.mat-calendar-body-selected {\n      box-shadow: inset 0 0 0 $mat-datepicker-selected-today-box-shadow-width\n                  mat-color($primary, default-contrast);\n    }\n  }\n\n  .mat-calendar-body-disabled > .mat-calendar-body-today:not(.mat-calendar-body-selected) {\n    border-color: fade-out(mat-color($foreground, hint-text), $mat-datepicker-today-fade-amount);\n  }\n}\n\n@mixin mat-datepicker-typography($config) {\n  .mat-calendar {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-calendar-body {\n    font-size: $mat-calendar-body-font-size;\n  }\n\n  .mat-calendar-body-label,\n  .mat-calendar-period-button {\n    font: {\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n\n  .mat-calendar-table-header th {\n    font: {\n      size: $mat-calendar-weekday-table-font-size;\n      weight: mat-font-weight($config, body-1);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-dialog-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-dialog-container {\n    background: mat-color($background, dialog);\n    color: mat-color($foreground, text);\n  }\n}\n\n@mixin mat-dialog-typography($config) {\n  .mat-dialog-title {\n    @include mat-typography-level-to-styles($config, title);\n  }\n}\n\n\n\n\n\n\n\n//[_ngcontent-%COMP%]   Include[_ngcontent-%COMP%]   this[_ngcontent-%COMP%]   empty[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   consistency[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   other[_ngcontent-%COMP%]   components.\n@mixin[_ngcontent-%COMP%]   mat-grid-list-theme($theme)[_ngcontent-%COMP%] { }\n\n@mixin mat-grid-list-typography($config) {\n  .mat-grid-tile-header,\n  .mat-grid-tile-footer {\n    @include mat-line-base(mat-font-size($config, caption));\n    font-size: mat-font-size($config, body-1);\n  }\n}\n\n\n\n\n//[_ngcontent-%COMP%]   Include[_ngcontent-%COMP%]   this[_ngcontent-%COMP%]   empty[_ngcontent-%COMP%]   mixin[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   consistency[_ngcontent-%COMP%]   with[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   other[_ngcontent-%COMP%]   components.\n@mixin[_ngcontent-%COMP%]   mat-icon-theme($theme)[_ngcontent-%COMP%] {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-icon {\n    &.mat-primary {\n      color: mat-color($primary);\n    }\n\n    &.mat-accent {\n      color: mat-color($accent);\n    }\n\n    &.mat-warn {\n      color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-icon-typography($config) { }\n\n\n\n\n\n\n@mixin mat-input-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // Placeholder colors. Required is used for the `*` star shown in the placeholder.\n  $input-placeholder-color: mat-color($foreground, hint-text);\n  $input-floating-placeholder-color: mat-color($primary);\n  $input-required-placeholder-color: mat-color($accent);\n\n  // Underline colors.\n  $input-underline-color: mat-color($foreground, divider);\n  $input-underline-color-accent: mat-color($accent);\n  $input-underline-color-warn: mat-color($warn);\n  $input-underline-focused-color: mat-color($primary);\n\n  .mat-input-placeholder {\n    color: $input-placeholder-color;\n  }\n\n  // :focus is applied to the input, but we apply mat-focused to the other elements\n  // that need to listen to it.\n  .mat-focused .mat-input-placeholder {\n    color: $input-floating-placeholder-color;\n\n    &.mat-accent {\n      color: $input-underline-color-accent;\n    }\n\n    &.mat-warn {\n      color: $input-underline-color-warn;\n    }\n  }\n\n  .mat-input-element:disabled {\n    color: mat-color($foreground, disabled-text);\n  }\n\n  // See _mat-input-placeholder-floating mixin in input-container.scss\n  input.mat-input-element:-webkit-autofill + .mat-input-placeholder,\n  .mat-focused .mat-input-placeholder.mat-float {\n    .mat-placeholder-required {\n      color: $input-required-placeholder-color;\n    }\n  }\n\n  .mat-input-underline {\n    background-color: $input-underline-color;\n  }\n\n  .mat-input-ripple {\n    background-color: $input-underline-focused-color;\n\n    &.mat-accent {\n      background-color: $input-underline-color-accent;\n    }\n\n    &.mat-warn {\n      background-color: $input-underline-color-warn;\n    }\n  }\n\n  // Styling for the error state of the input container. Note that while the same can be\n  // achieved with the ng-* classes, we use this approach in order to ensure that the same\n  // logic is used to style the error state and to show the error messages.\n  .mat-input-invalid {\n    .mat-input-placeholder {\n      color: $input-underline-color-warn;\n\n      &.mat-accent,\n      &.mat-float .mat-placeholder-required {\n        color: $input-underline-color-warn;\n      }\n    }\n\n    .mat-input-ripple {\n      background-color: $input-underline-color-warn;\n    }\n  }\n\n  .mat-input-error {\n    color: $input-underline-color-warn;\n  }\n}\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   floating[_ngcontent-%COMP%]   placeholder[_ngcontent-%COMP%]   above[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   input[_ngcontent-%COMP%]   itself.\n@mixin[_ngcontent-%COMP%]   _mat-input-placeholder-floating($font-scale[_ngcontent-%COMP%], $infix-padding[_ngcontent-%COMP%], $infix-margin-top)[_ngcontent-%COMP%] {\n  transform: translateY(-$infix-margin-top - $infix-padding)\n             scale($font-scale)\n             // We use perspecitve to fix the text blurriness as described here:\n             // http://www.useragentman.com/blog/2014/05/04/fixing-typography-inside-of-2-d-css-transforms/\n             // This results in a small jitter after the label floats on Firefox, which the\n             // translateZ fixes.\n             perspective(100px) translateZ(0.001px);\n  // The tricks above used to smooth out the animation on chrome and firefox actually make things\n  // worse on IE, so we don\'t include them in the IE version.\n  -ms-transform: translateY(-$infix-margin-top - $infix-padding)\n                 scale($font-scale);\n\n  width: 100% / $font-scale;\n}\n\n@mixin mat-input-typography($config) {\n  // The unit-less line-height from the font config.\n  $line-height: mat-line-height($config, input);\n\n  // The amount to scale the font for the floating label and subscript.\n  $subscript-font-scale: 0.75;\n  // The amount to scale the font for the prefix and suffix icons.\n  $prefix-suffix-icon-font-scale: 1.5;\n\n  // The amount of space between the top of the line and the top of the actual text\n  // (as a fraction of the font-size).\n  $line-spacing: ($line-height - 1) / 2;\n  // The padding on the infix. Mocks show half of the text size, but seem to measure from the edge\n  // of the text itself, not the edge of the line; therefore we subtract off the line spacing.\n  $infix-padding: 0.5em - $line-spacing;\n  // The margin applied to the input-infix to reserve space for the floating label.\n  $infix-margin-top: 1em * $line-height * $subscript-font-scale;\n  // Font size to use for the label and subscript text.\n  $subscript-font-size: $subscript-font-scale * 100%;\n  // Font size to use for the for the prefix and suffix icons.\n  $prefix-suffix-icon-font-size: $prefix-suffix-icon-font-scale * 100%;\n  // The space between the bottom of the input table and the subscript container. Mocks show half of\n  // the text size, but this margin is applied to an element with the subscript text font size, so\n  // we need to divide by the scale factor to make it half of the original text size. We again need\n  // to subtract off the line spacing since the mocks measure to the edge of the text, not the  edge\n  // of the line.\n  $subscript-margin-top: 0.5em / $subscript-font-scale - $line-spacing;\n  // The padding applied to the input-wrapper to reserve space for the subscript, since it\'s\n  // absolutely positioned. This is a combination of the subscript\'s margin and line-height, but we\n  // need to multiply by the subscript font scale factor since the wrapper has a larger font size.\n  $wrapper-padding-bottom: ($subscript-margin-top + $line-height) * $subscript-font-scale;\n\n  .mat-input-container {\n    @include mat-typography-level-to-styles($config, input);\n  }\n\n  .mat-input-wrapper {\n    padding-bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-input-prefix,\n  .mat-input-suffix {\n    // Allow icons in a prefix or suffix to adapt to the correct size.\n    .mat-icon,\n    .mat-datepicker-toggle {\n      font-size: $prefix-suffix-icon-font-size;\n    }\n\n    // Allow icon buttons in a prefix or suffix to adapt to the correct size.\n    .mat-icon-button {\n      height: $prefix-suffix-icon-font-scale * 1em;\n      width: $prefix-suffix-icon-font-scale * 1em;\n\n      .mat-icon {\n        line-height: $prefix-suffix-icon-font-scale;\n      }\n    }\n  }\n\n  .mat-input-infix {\n    padding: $infix-padding 0;\n    // Throws off the baseline if we do it as a real margin, so we do it as a border instead.\n    border-top: $infix-margin-top solid transparent;\n  }\n\n  .mat-input-element {\n    &:-webkit-autofill + .mat-input-placeholder-wrapper .mat-float {\n      @include _mat-input-placeholder-floating($subscript-font-scale,\n          $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-input-placeholder-wrapper {\n    top: -$infix-margin-top;\n    padding-top: $infix-margin-top;\n  }\n\n  .mat-input-placeholder {\n    top: $infix-margin-top + $infix-padding;\n\n    // Show the placeholder above the input when it\'s not empty, or focused.\n    &.mat-float:not(.mat-empty), .mat-focused &.mat-float {\n      @include _mat-input-placeholder-floating($subscript-font-scale,\n          $infix-padding, $infix-margin-top);\n    }\n  }\n\n  .mat-input-underline {\n    // We want the underline to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount.\n    bottom: $wrapper-padding-bottom;\n  }\n\n  .mat-input-subscript-wrapper {\n    font-size: $subscript-font-size;\n    margin-top: $subscript-margin-top;\n\n    // We want the subscript to start at the end of the content box, not the padding box,\n    // so we move it up by the padding amount (adjusted for the smaller font size);\n    top: calc(100% - #{$wrapper-padding-bottom / $subscript-font-scale});\n  }\n}\n\n\n\n\n\n\n\n@mixin mat-list-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-list, .mat-nav-list {\n    .mat-list-item {\n      color: mat-color($foreground, text);\n    }\n\n    .mat-subheader {\n      color: mat-color($foreground, secondary-text);\n    }\n  }\n\n  .mat-divider {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-nav-list .mat-list-item {\n    outline: none;\n\n    &:hover, &.mat-list-item-focus {\n      background: mat-color($background, \'hover\');\n    }\n  }\n}\n\n@mixin mat-list-typography($config) {\n  $font-family: mat-font-family($config);\n\n  .mat-list-item {\n    font-family: $font-family;\n  }\n\n  // Default list\n  .mat-list, .mat-nav-list {\n    .mat-list-item {\n      font-size: mat-font-size($config, subheading-2);\n      @include mat-line-base(mat-font-size($config, body-1));\n    }\n\n    .mat-subheader {\n      @include mat-typography-level-to-styles($config, body-2);\n    }\n  }\n\n  // Dense list\n  .mat-list[dense], .mat-nav-list[dense] {\n    .mat-list-item {\n      font-size: mat-font-size($config, caption);\n      @include mat-line-base(mat-font-size($config, caption));\n    }\n\n    .mat-subheader {\n      font: mat-font-weight($config, body-2) mat-font-size($config, caption) $font-family;\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-menu-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-menu-content {\n    background: mat-color($background, \'card\');\n  }\n\n  .mat-menu-item {\n    background: transparent;\n    color: mat-color($foreground, \'text\');\n\n    &[disabled] {\n      color: mat-color($foreground, \'disabled\');\n    }\n\n    .mat-icon {\n      color: mat-color($foreground, \'icon\');\n      vertical-align: middle;\n    }\n\n    &:hover:not([disabled]), &:focus:not([disabled]) {\n      background: mat-color($background, \'hover\');\n    }\n  }\n}\n\n@mixin mat-menu-typography($config) {\n  .mat-menu-item {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, subheading-2);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin mat-paginator-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n\n  .mat-paginator {\n    background: mat-color($background, \'card\');\n  }\n\n  .mat-paginator,\n  .mat-paginator-page-size .mat-select-trigger {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-paginator-increment,\n  .mat-paginator-decrement {\n    border-top: 2px solid mat-color($foreground, \'icon\');\n    border-right: 2px solid mat-color($foreground, \'icon\');\n  }\n\n  .mat-icon-button[disabled] {\n    .mat-paginator-increment,\n    .mat-paginator-decrement {\n      border-color: mat-color($foreground, \'disabled\');\n    }\n  }\n}\n\n@mixin mat-paginator-typography($config) {\n  .mat-paginator {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, caption);\n    }\n  }\n\n  .mat-paginator-page-size .mat-select-trigger {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, caption);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-progress-bar-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-progress-bar-background {\n    background-image: #{_mat-progress-bar-buffer($primary, lighter)};\n  }\n\n  .mat-progress-bar-buffer {\n    background-color: mat-color($primary, lighter);\n  }\n\n  .mat-progress-bar-fill::after {\n    background-color: mat-color($primary);\n  }\n\n  .mat-progress-bar.mat-accent {\n    .mat-progress-bar-background {\n      background-image: #{_mat-progress-bar-buffer($accent, lighter)};\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($accent, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($accent);\n    }\n  }\n\n  .mat-progress-bar.mat-warn {\n    .mat-progress-bar-background {\n      background-image: #{_mat-progress-bar-buffer($warn, lighter)};\n    }\n\n    .mat-progress-bar-buffer {\n      background-color: mat-color($warn, lighter);\n    }\n\n    .mat-progress-bar-fill::after {\n      background-color: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-bar-typography($config) { }\n\n//[_ngcontent-%COMP%]   TODO(josephperrott)[_ngcontent-%COMP%]:   Find[_ngcontent-%COMP%]   better[_ngcontent-%COMP%]   way[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   inline[_ngcontent-%COMP%]   svgs.\n//[_ngcontent-%COMP%]   In[_ngcontent-%COMP%]   buffer[_ngcontent-%COMP%]   mode[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   repeated[_ngcontent-%COMP%]   SVG[_ngcontent-%COMP%]   object[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   used[_ngcontent-%COMP%]   as[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   background.\n//[_ngcontent-%COMP%]   Each[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   following[_ngcontent-%COMP%]   defines[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   SVG[_ngcontent-%COMP%]   object[_ngcontent-%COMP%]   for[_ngcontent-%COMP%]   each[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   class[_ngcontent-%COMP%]   defined[_ngcontent-%COMP%]   colors.\n//\n//[_ngcontent-%COMP%]   The[_ngcontent-%COMP%]   string[_ngcontent-%COMP%]   is[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   URL[_ngcontent-%COMP%]   encoded[_ngcontent-%COMP%]   version[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]:   <svg[_ngcontent-%COMP%]   xmlns="http[_ngcontent-%COMP%]://www.w3.org/2000/svg"   xmlns[_ngcontent-%COMP%]:xlink="http://www.w3.org/1999/xlink"   version="1.1"[_ngcontent-%COMP%]   x="0px"[_ngcontent-%COMP%]   y="0px"[_ngcontent-%COMP%]   enable-background="new[_ngcontent-%COMP%]   0[_ngcontent-%COMP%]   0[_ngcontent-%COMP%]   5[_ngcontent-%COMP%]   2"\n//[_ngcontent-%COMP%]   xml[_ngcontent-%COMP%]:space="preserve"   viewBox="0[_ngcontent-%COMP%]   0[_ngcontent-%COMP%]   5[_ngcontent-%COMP%]   2"[_ngcontent-%COMP%]   preserveAspectRatio="none[_ngcontent-%COMP%]   slice"[_ngcontent-%COMP%] > //[_ngcontent-%COMP%]   <circle[_ngcontent-%COMP%]   cx="1"[_ngcontent-%COMP%]   cy="1"[_ngcontent-%COMP%]   r="1"[_ngcontent-%COMP%]   fill="[_ngcontent-%COMP%]{INJECTED_COLOR}"/[_ngcontent-%COMP%] > //[_ngcontent-%COMP%]   </svg[_ngcontent-%COMP%] > @function[_ngcontent-%COMP%]   _mat-progress-bar-buffer($palette[_ngcontent-%COMP%], $hue)[_ngcontent-%COMP%] {\n  $color: mat-color($palette, $hue) + \'\';\n\n  // We also need to escape the hash in hex colors,\n  // otherwise IE will throw an XML error.\n  @if str-index($color, \'#\') == 1 {\n    $color: \'%23\' + str-slice($color, 2);\n  }\n\n  $result: \'\' +\n    \'data:image/svg+xml;charset=UTF-8,%3Csvg%20version%3D%271.1%27%20xmlns%3D%27http%3A%2F%2F\' +\n    \'www.w3.org%2F2000%2Fsvg%27%20xmlns%3Axlink%3D%27http%3A%2F%2Fwww.w3.org%2F1999%2Fxlink%2\' +\n    \'7%20x%3D%270px%27%20y%3D%270px%27%20enable-background%3D%27new%200%200%205%202%27%20xml%\' +\n    \'3Aspace%3D%27preserve%27%20viewBox%3D%270%200%205%202%27%20preserveAspectRatio%3D%27none\' +\n    \'%20slice%27%3E%3Ccircle%20cx%3D%271%27%20cy%3D%271%27%20r%3D%271%27%20fill%3D%27\' +\n    $color + \'%27%2F%3E%3C%2Fsvg%3E\';\n\n  @return url($result);\n}\n\n\n\n\n\n@mixin mat-progress-spinner-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-progress-spinner, .mat-spinner {\n    path {\n      stroke: mat-color($primary);\n    }\n\n    &.mat-accent path {\n      stroke: mat-color($accent);\n    }\n\n    &.mat-warn path {\n      stroke: mat-color($warn);\n    }\n  }\n}\n\n@mixin mat-progress-spinner-typography($config) { }\n\n\n\n\n\n@mixin mat-radio-color($palette) {\n  &.mat-radio-checked .mat-radio-outer-circle {\n    border-color: mat-color($palette);\n  }\n\n  .mat-radio-inner-circle {\n    background-color: mat-color($palette);\n  }\n\n  .mat-radio-ripple .mat-ripple-element {\n    background-color: mat-color($palette, 0.26);\n  }\n}\n\n@mixin mat-radio-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-radio-outer-circle {\n    border-color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-radio-disabled .mat-radio-outer-circle {\n    border-color: mat-color($foreground, disabled);\n  }\n\n  .mat-radio-disabled {\n    .mat-radio-ripple .mat-ripple-element, .mat-radio-inner-circle {\n      background-color: mat-color($foreground, disabled);\n    }\n\n    .mat-radio-label-content {\n      color: mat-color($foreground, disabled);\n    }\n  }\n\n  .mat-radio-button {\n    &.mat-primary {\n      @include mat-radio-color($primary);\n    }\n\n    &.mat-accent {\n      @include mat-radio-color($accent);\n    }\n\n    &.mat-warn {\n      @include mat-radio-color($warn);\n    }\n  }\n}\n\n@mixin mat-radio-typography($config) {\n  .mat-radio-button {\n    font-family: mat-font-family($config);\n  }\n}\n\n\n\n\n\n@mixin _mat-select-inner-content-theme($palette) {\n  $color: mat-color($palette);\n\n  .mat-select-trigger, .mat-select-arrow {\n    color: $color;\n  }\n\n  .mat-select-underline {\n    background-color: $color;\n  }\n}\n\n@mixin mat-select-theme($theme) {\n  $foreground: map-get($theme, foreground);\n  $background: map-get($theme, background);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n\n  .mat-select-trigger,\n  .mat-select-arrow {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-select-underline {\n    background-color: mat-color($foreground, divider);\n  }\n\n  .mat-select-disabled .mat-select-value,\n  .mat-select-arrow,\n  .mat-select-trigger {\n    color: mat-color($foreground, hint-text);\n  }\n\n  .mat-select-content, .mat-select-panel-done-animating {\n    background: mat-color($background, card);\n  }\n\n  .mat-select-value {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-select:focus:not(.mat-select-disabled) {\n    &.mat-primary {\n      @include _mat-select-inner-content-theme($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-select-inner-content-theme($accent);\n    }\n  }\n\n  .mat-select:focus:not(.mat-select-disabled).mat-warn,\n  .mat-select:not(:focus).ng-invalid.ng-touched:not(.mat-select-disabled) {\n    @include _mat-select-inner-content-theme($warn);\n  }\n}\n\n@mixin mat-select-typography($config) {\n  .mat-select {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-select-trigger {\n    font-size: mat-font-size($config, subheading-2);\n  }\n}\n\n\n\n\n\n@mixin mat-sidenav-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // We use invert() here to have the darken the background color expected to be used. If the\n  // background is light, we use a dark backdrop. If the background is dark,\n  // we use a light backdrop.\n  $sidenav-backdrop-color: invert(mat-color($background, card, 0.6)) !default;\n  $sidenav-background-color: mat-color($background, dialog) !default;\n  $sidenav-container-background-color:  mat-color($background, background) !default;\n  $sidenav-push-background-color: mat-color($background, dialog) !default;\n\n  .mat-sidenav-container {\n    background-color: $sidenav-container-background-color;\n    color: mat-color($foreground, text);\n  }\n\n  .mat-sidenav {\n    background-color: $sidenav-background-color;\n    color: mat-color($foreground, text);\n\n    &.mat-sidenav-push {\n      background-color: $sidenav-push-background-color;\n    }\n  }\n\n  .mat-sidenav-backdrop.mat-sidenav-shown {\n    background-color: $sidenav-backdrop-color;\n  }\n}\n\n@mixin mat-sidenav-typography($config) { }\n\n\n\n\n\n@mixin _mat-slide-toggle-checked($palette, $thumb-checked-hue) {\n  // Do not apply the checked colors if the toggle is disabled, because the specificity would be to high for\n  // the disabled styles.\n  &.mat-checked:not(.mat-disabled) {\n    .mat-slide-toggle-thumb {\n      background-color: mat-color($palette, $thumb-checked-hue);\n    }\n\n    .mat-slide-toggle-bar {\n      background-color: mat-color($palette, $thumb-checked-hue, 0.5);\n    }\n  }\n}\n\n//[_ngcontent-%COMP%]   Applies[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   specified[_ngcontent-%COMP%]   colors[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   slide-toggle[_ngcontent-%COMP%]   ripple[_ngcontent-%COMP%]   elements.\n@mixin[_ngcontent-%COMP%]   _mat-slide-toggle-ripple($palette[_ngcontent-%COMP%], $ripple-unchecked-color[_ngcontent-%COMP%], $ripple-checked-color)[_ngcontent-%COMP%] {\n  &:not(.mat-checked) .mat-ripple-element {\n    background-color: $ripple-unchecked-color;\n  }\n  .mat-ripple-element {\n    background-color: $ripple-checked-color;\n  }\n}\n\n@mixin mat-slide-toggle-theme($theme) {\n  $is-dark: map_get($theme, is-dark);\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  // Color hues based on the specs, which prescribe different hues for dark and light themes\n  // https://material.google.com/components/selection-controls.html#selection-controls-switch\n  $thumb-normal-hue: if($is-dark, 400, 50);\n  $thumb-checked-hue: if($is-dark, 200, 500);\n  $thumb-disabled-hue: if($is-dark, 800, 400);\n\n  $bar-normal-color: mat-color($foreground, disabled);\n  $bar-disabled-color: if($is-dark, rgba(white, 0.12), rgba(black, 0.1));\n\n  // Ripple colors are based on the current palette and the state of the slide-toggle.\n  // See https://material.google.com/components/selection-controls.html#selection-controls-switch\n  $ripple-checked-opacity: 0.12;\n  $ripple-unchecked-color: mat-color($foreground, base, if($is-dark, 0.12, 0.06));\n  $ripple-primary-color: mat-color($primary, $thumb-checked-hue, $ripple-checked-opacity);\n  $ripple-accent-color: mat-color($accent, $thumb-checked-hue, $ripple-checked-opacity);\n  $ripple-warn-color: mat-color($warn, $thumb-checked-hue, $ripple-checked-opacity);\n\n  .mat-slide-toggle {\n    @include _mat-slide-toggle-checked($accent, $thumb-checked-hue);\n    @include _mat-slide-toggle-ripple($accent, $ripple-unchecked-color, $ripple-accent-color);\n\n    &.mat-primary {\n      @include _mat-slide-toggle-checked($primary, $thumb-checked-hue);\n      @include _mat-slide-toggle-ripple($accent, $ripple-unchecked-color, $ripple-primary-color);\n    }\n\n    &.mat-warn {\n      @include _mat-slide-toggle-checked($warn, $thumb-checked-hue);\n      @include _mat-slide-toggle-ripple($accent, $ripple-unchecked-color, $ripple-warn-color);\n    }\n\n  }\n\n  .mat-disabled {\n    .mat-slide-toggle-thumb {\n      // The thumb of the slide-toggle always uses the hue 400 of the grey palette in dark or light themes.\n      // Since this is very specific to the slide-toggle component, we\'re not providing\n      // it in the background palette.\n      background-color: mat-color($mat-grey, $thumb-disabled-hue);\n    }\n    .mat-slide-toggle-bar {\n      background-color: $bar-disabled-color;\n    }\n  }\n\n  .mat-slide-toggle-thumb {\n    background-color: mat-color($mat-grey, $thumb-normal-hue);\n  }\n\n  .mat-slide-toggle-bar {\n    background-color: $bar-normal-color;\n  }\n}\n\n@mixin mat-slide-toggle-typography($config) {\n  .mat-slide-toggle-content {\n    @include mat-typography-level-to-styles($config, body-1);\n  }\n}\n\n\n\n\n\n@mixin _mat-slider-inner-content-theme($palette) {\n  .mat-slider-track-fill,\n  .mat-slider-thumb,\n  .mat-slider-thumb-label {\n    background-color: mat-color($palette);\n  }\n\n  .mat-slider-thumb-label-text {\n    color: mat-color($palette, default-contrast);\n  }\n}\n\n@mixin mat-slider-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  $mat-slider-off-color: mat-color($foreground, slider-off);\n  $mat-slider-off-focused-color: mat-color($foreground, slider-off-active);\n  $mat-slider-disabled-color: mat-color($foreground, slider-off);\n  $mat-slider-labeled-min-value-thumb-color: mat-color($foreground, base);\n  $mat-slider-labeled-min-value-thumb-label-color: mat-color($foreground, slider-off);\n  $mat-slider-focus-ring-color: mat-color($accent, default, 0.2);\n  $mat-slider-focus-ring-min-value-color: mat-color($foreground, base, 0.12);\n  $mat-slider-tick-color: mat-color($foreground, base, 0.7);\n  $mat-slider-tick-size: 2px;\n\n  .mat-slider-track-background {\n    background-color: $mat-slider-off-color;\n  }\n\n  .mat-primary {\n    @include _mat-slider-inner-content-theme($primary);\n  }\n\n  .mat-accent {\n    @include _mat-slider-inner-content-theme($accent);\n  }\n\n  .mat-warn {\n    @include _mat-slider-inner-content-theme($warn);\n  }\n\n  .mat-slider-focus-ring {\n    background-color: $mat-slider-focus-ring-color;\n  }\n\n  .mat-slider:hover,\n  .cdk-focused {\n    .mat-slider-track-background {\n      background-color: $mat-slider-off-focused-color;\n    }\n  }\n\n  .mat-slider-disabled {\n    .mat-slider-track-background,\n    .mat-slider-track-fill,\n    .mat-slider-thumb {\n      background-color: $mat-slider-disabled-color;\n    }\n\n    &:hover {\n      .mat-slider-track-background {\n        background-color: $mat-slider-disabled-color;\n      }\n    }\n  }\n\n  .mat-slider-min-value {\n    .mat-slider-focus-ring {\n      background-color: $mat-slider-focus-ring-min-value-color;\n    }\n\n    &.mat-slider-thumb-label-showing {\n      .mat-slider-thumb,\n      .mat-slider-thumb-label {\n        background-color: $mat-slider-labeled-min-value-thumb-color;\n      }\n\n      &.cdk-focused {\n        .mat-slider-thumb,\n        .mat-slider-thumb-label {\n          background-color: $mat-slider-labeled-min-value-thumb-label-color;\n        }\n      }\n    }\n\n    &:not(.mat-slider-thumb-label-showing) {\n      .mat-slider-thumb {\n        border-color: $mat-slider-off-color;\n        background-color: transparent;\n      }\n\n      &:hover,\n      &.cdk-focused {\n        .mat-slider-thumb {\n          border-color: $mat-slider-off-focused-color;\n        }\n\n        &.mat-slider-disabled .mat-slider-thumb {\n          border-color: $mat-slider-disabled-color;\n        }\n      }\n    }\n  }\n\n  .mat-slider-has-ticks .mat-slider-wrapper::after {\n    border-color: $mat-slider-tick-color;\n  }\n\n  .mat-slider-horizontal .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to right, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n    // Firefox doesn\'t draw the gradient correctly with \'to right\'\n    // (see https://bugzilla.mozilla.org/show_bug.cgi?id=1314319).\n    background-image: -moz-repeating-linear-gradient(0.0001deg, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n  }\n\n  .mat-slider-vertical .mat-slider-ticks {\n    background-image: repeating-linear-gradient(to bottom, $mat-slider-tick-color,\n        $mat-slider-tick-color $mat-slider-tick-size, transparent 0, transparent);\n  }\n}\n\n@mixin mat-slider-typography($config) {\n  .mat-slider-thumb-label-text {\n    font: {\n      size: mat-font-size($config, caption);\n      weight: mat-font-weight($config, body-2);\n    }\n  }\n}\n\n\n\n\n\n@mixin mat-tabs-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n  $header-border: 1px solid mat-color($foreground, divider);\n\n  .mat-tab-nav-bar,\n  .mat-tab-header {\n    border-bottom: $header-border;\n  }\n\n  .mat-tab-group-inverted-header {\n    .mat-tab-nav-bar,\n    .mat-tab-header {\n      border-top: $header-border;\n      border-bottom: none;\n    }\n  }\n\n  .mat-tab-label:focus {\n    background-color: mat-color($primary, lighter, 0.3);\n  }\n\n  .mat-ink-bar {\n    background-color: mat-color($primary);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    color: mat-color($foreground, text);\n\n    &.mat-tab-disabled {\n      color: mat-color($foreground, disabled-text);\n    }\n  }\n}\n\n@mixin mat-tabs-typography($config) {\n  .mat-tab-group {\n    font-family: mat-font-family($config);\n  }\n\n  .mat-tab-label, .mat-tab-link {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, button);\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n\n@mixin _mat-toolbar-color($palette) {\n  background: mat-color($palette);\n  color: mat-color($palette, default-contrast);\n}\n\n@mixin mat-toolbar-theme($theme) {\n  $primary: map-get($theme, primary);\n  $accent: map-get($theme, accent);\n  $warn: map-get($theme, warn);\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-toolbar {\n    background: mat-color($background, app-bar);\n    color: mat-color($foreground, text);\n\n    &.mat-primary {\n      @include _mat-toolbar-color($primary);\n    }\n\n    &.mat-accent {\n      @include _mat-toolbar-color($accent);\n    }\n\n    &.mat-warn {\n      @include _mat-toolbar-color($warn);\n    }\n  }\n}\n\n@mixin mat-toolbar-typography($config) {\n  .mat-toolbar,\n  .mat-toolbar h1,\n  .mat-toolbar h2,\n  .mat-toolbar h3,\n  .mat-toolbar h4,\n  .mat-toolbar h5,\n  .mat-toolbar h6 {\n    @include mat-typography-level-to-styles($config, title);\n    margin: 0;\n  }\n}\n\n\n\n\n\n//[_ngcontent-%COMP%]   TODO(crisbeto)[_ngcontent-%COMP%]:   these[_ngcontent-%COMP%]   doesn\'t[_ngcontent-%COMP%]   correspond[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   any[_ngcontent-%COMP%]   typography[_ngcontent-%COMP%]   levels\n//[_ngcontent-%COMP%]   and[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   width/height[_ngcontent-%COMP%]   appear[_ngcontent-%COMP%]   to[_ngcontent-%COMP%]   be[_ngcontent-%COMP%]   off[_ngcontent-%COMP%]   from[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   spec.\n$mat-tooltip-target-height[_ngcontent-%COMP%]:   22px[_ngcontent-%COMP%];\n$mat-tooltip-font-size[_ngcontent-%COMP%]:   10px[_ngcontent-%COMP%];\n$mat-tooltip-vertical-padding[_ngcontent-%COMP%]:   ($mat-tooltip-target-height[_ngcontent-%COMP%]   -[_ngcontent-%COMP%]   $mat-tooltip-font-size)[_ngcontent-%COMP%]   /[_ngcontent-%COMP%]   2[_ngcontent-%COMP%];\n\n@mixin mat-tooltip-theme($theme) {\n  .mat-tooltip {\n    background: mat-color($mat-grey, 700, 0.9);\n  }\n}\n\n@mixin mat-tooltip-typography($config) {\n  .mat-tooltip {\n    font-family: mat-font-family($config);\n    font-size: $mat-tooltip-font-size;\n    padding-top: $mat-tooltip-vertical-padding;\n    padding-bottom: $mat-tooltip-vertical-padding;\n  }\n}\n\n\n\n@mixin mat-simple-snack-bar-theme($theme) { }\n\n@mixin mat-simple-snack-bar-typography($config) {\n  .mat-simple-snackbar {\n    font: {\n      family: mat-font-family($config);\n      size: mat-font-size($config, body-1);\n    }\n  }\n\n  .mat-simple-snackbar-action {\n    line-height: 1;\n    font: {\n      family: inherit;\n      size: inherit;\n      weight: mat-font-weight($config, button);\n    }\n  }\n}\n\n\n\n\n\n//[_ngcontent-%COMP%]   Includes[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   typographic[_ngcontent-%COMP%]   styles.\n@mixin[_ngcontent-%COMP%]   angular-material-typography($config[_ngcontent-%COMP%]:   mat-typography-config())[_ngcontent-%COMP%] {\n  @include mat-base-typography($config);\n  @include mat-autocomplete-typography($config);\n  @include mat-button-typography($config);\n  @include mat-button-toggle-typography($config);\n  @include mat-card-typography($config);\n  @include mat-checkbox-typography($config);\n  @include mat-chips-typography($config);\n  @include mat-table-typography($config);\n  @include mat-datepicker-typography($config);\n  @include mat-dialog-typography($config);\n  @include mat-grid-list-typography($config);\n  @include mat-icon-typography($config);\n  @include mat-input-typography($config);\n  @include mat-menu-typography($config);\n  @include mat-paginator-typography($config);\n  @include mat-progress-bar-typography($config);\n  @include mat-progress-spinner-typography($config);\n  @include mat-radio-typography($config);\n  @include mat-select-typography($config);\n  @include mat-sidenav-typography($config);\n  @include mat-slide-toggle-typography($config);\n  @include mat-slider-typography($config);\n  @include mat-tabs-typography($config);\n  @include mat-toolbar-typography($config);\n  @include mat-tooltip-typography($config);\n  @include mat-list-typography($config);\n  @include mat-option-typography($config);\n  @include mat-optgroup-typography($config);\n  @include mat-simple-snack-bar-typography($config);\n}\n\n\n//[_ngcontent-%COMP%]   Mixin[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   renders[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   core[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   are[_ngcontent-%COMP%]   not[_ngcontent-%COMP%]   theme-dependent.\n@mixin[_ngcontent-%COMP%]   mat-core()[_ngcontent-%COMP%] {\n  // Provides external CSS classes for each elevation value. Each CSS class is formatted as\n  // `mat-elevation-z$zValue` where `$zValue` corresponds to the z-space to which the element is\n  // elevated.\n  @for $zValue from 0 through 24 {\n    .mat-elevation-z#{$zValue} {\n      @include mat-elevation($zValue);\n    }\n  }\n\n  @include angular-material-typography();\n  @include mat-ripple();\n  @include mat-option();\n  @include mat-optgroup();\n  @include cdk-a11y();\n  @include cdk-overlay();\n}\n\n//[_ngcontent-%COMP%]   Mixin[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   renders[_ngcontent-%COMP%]   all[_ngcontent-%COMP%]   of[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   core[_ngcontent-%COMP%]   styles[_ngcontent-%COMP%]   that[_ngcontent-%COMP%]   depend[_ngcontent-%COMP%]   on[_ngcontent-%COMP%]   the[_ngcontent-%COMP%]   theme.\n@mixin[_ngcontent-%COMP%]   mat-core-theme($theme)[_ngcontent-%COMP%] {\n  @include mat-ripple-theme($theme);\n  @include mat-option-theme($theme);\n  @include mat-optgroup-theme($theme);\n  @include mat-pseudo-checkbox-theme($theme);\n\n  // Wrapper element that provides the theme background when the\n  // user\'s content isn\'t inside of a `md-sidenav-container`.\n  .mat-app-background {\n    $background: map-get($theme, background);\n    background-color: mat-color($background, background);\n  }\n\n  // Marker that is used to determine whether the user has added a theme to their page.\n  .mat-theme-loaded-marker {\n    display: none;\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n@mixin mat-expansion-panel-theme($theme) {\n  $background: map-get($theme, background);\n  $foreground: map-get($theme, foreground);\n\n  .mat-expansion-panel {\n    background: mat-color($background, card);\n    color: mat-color($foreground, base);\n  }\n\n  .mat-action-row {\n    border-top-color: mat-color($foreground, divider);\n  }\n\n  .mat-expansion-panel-header:focus, \n  .mat-expansion-panel-header:hover {\n    background: mat-color($background, hover);\n  }\n  .mat-expansion-panel-header-title {\n    color: mat-color($foreground, text);\n  }\n\n  .mat-expansion-panel-header-description {\n    color: mat-color($foreground, secondary-text);\n  }\n\n  .mat-expansion-indicator::after {\n    color: mat-color($foreground, secondary-text);\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n//[_ngcontent-%COMP%]   Create[_ngcontent-%COMP%]   a[_ngcontent-%COMP%]   theme.\n@mixin[_ngcontent-%COMP%]   angular-material-theme($theme)[_ngcontent-%COMP%] {\n  @include mat-core-theme($theme);\n  @include mat-autocomplete-theme($theme);\n  @include mat-button-theme($theme);\n  @include mat-button-toggle-theme($theme);\n  @include mat-card-theme($theme);\n  @include mat-checkbox-theme($theme);\n  @include mat-chips-theme($theme);\n  @include mat-table-theme($theme);\n  @include mat-datepicker-theme($theme);\n  @include mat-dialog-theme($theme);\n  @include mat-expansion-panel-theme($theme);\n  @include mat-grid-list-theme($theme);\n  @include mat-icon-theme($theme);\n  @include mat-input-theme($theme);\n  @include mat-list-theme($theme);\n  @include mat-menu-theme($theme);\n  @include mat-paginator-theme($theme);\n  @include mat-progress-bar-theme($theme);\n  @include mat-progress-spinner-theme($theme);\n  @include mat-radio-theme($theme);\n  @include mat-select-theme($theme);\n  @include mat-sidenav-theme($theme);\n  @include mat-slide-toggle-theme($theme);\n  @include mat-slider-theme($theme);\n  @include mat-tabs-theme($theme);\n  @include mat-toolbar-theme($theme);\n  @include mat-tooltip-theme($theme);\n  @include mat-simple-snack-bar-theme($theme);\n}'];
//# sourceMappingURL=data:application/json;base64,eyJmaWxlIjoiQzovTXlXb3JrL3BvcnRmb2xpby9ub2RlX21vZHVsZXMvQGFuZ3VsYXIvbWF0ZXJpYWwvX3RoZW1pbmcuc2Nzcy5zaGltLm5nc3R5bGUudHMiLCJ2ZXJzaW9uIjozLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuZzovLy9DOi9NeVdvcmsvcG9ydGZvbGlvL25vZGVfbW9kdWxlcy9AYW5ndWxhci9tYXRlcmlhbC9fdGhlbWluZy5zY3NzIl0sInNvdXJjZXNDb250ZW50IjpbIiAiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OzsifQ==
